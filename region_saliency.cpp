/**
 * Ming-Ming Cheng, Guo-Xin Zhang, Niloy J. Mitra, Xiaolei Huang, Shi-Min Hu. Global Contrast based Salient Region Detection. IEEE CVPR, p. 409-416, Colorado Springs, Colorado, USA, June 21-23, 2011.
 */
#include "stdafx.h"
#include "region_saliency.h"

#include <stdio.h>

#ifdef __MEX
#define __CONST__ const
#include "matrix.h"
#include "mex.h"
#endif

#ifndef SQR
#define SQR(x) ((x)*(x))
#endif

typedef unsigned char byte_t;

//const char* RegionSaliency::SAL_TYPE_DES[SAL_TYPE_NUM] = {"_RC", "_HC", "_FT", "_LC", "_SR"};
//const RegionSaliency::GET_SAL_FUNC RegionSaliency::gFuns[SAL_TYPE_NUM] ={GetRC, GetHC, GetFT, GetLC, GetSR};

/* center bias matrix; used for debiasing 
 *
 * calculated with sigma=0.5
 *
 * generated with: test_region_saliency_center_bias.m
 */
const int debias_matrix_nrows=100;
const int debias_matrix_ncols=100;
const double debias_matrix_sigma=0.5;
const double debias_matrix[]={
	 0.495809, 0.502878, 0.509896, 0.516857, 0.523758, 0.530593, 0.537358, 0.544048, 0.550659, 0.557186, 0.563624, 0.569969, 0.576216, 0.582361, 0.588399, 0.594327, 0.600139, 0.605832, 0.611400, 0.616841, 0.622150, 0.627323, 0.632356, 0.637245, 0.641987, 0.646578, 0.651014, 0.655293, 0.659410, 0.663363, 0.667148, 0.670763, 0.674205, 0.677470, 0.680557, 0.683464, 0.686187, 0.688725, 0.691075, 0.693236, 0.695206, 0.696984, 0.698568, 0.699956, 0.701148, 0.702143, 0.702940, 0.703539, 0.703938, 0.704137, 0.704137, 0.703938, 0.703539, 0.702940, 0.702143, 0.701148, 0.699956, 0.698568, 0.696984, 0.695206, 0.693236, 0.691075, 0.688725, 0.686187, 0.683464, 0.680557, 0.677470, 0.674205, 0.670763, 0.667148, 0.663363, 0.659410, 0.655293, 0.651014, 0.646578, 0.641987, 0.637245, 0.632356, 0.627323, 0.622150, 0.616841, 0.611400, 0.605832, 0.600139, 0.594327, 0.588399, 0.582361, 0.576216, 0.569969, 0.563624, 0.557186, 0.550659, 0.544048, 0.537358, 0.530593, 0.523758, 0.516857, 0.509896, 0.502878, 0.495809,
	 0.502878, 0.510048, 0.517166, 0.524227, 0.531225, 0.538158, 0.545019, 0.551805, 0.558510, 0.565130, 0.571660, 0.578095, 0.584431, 0.590664, 0.596789, 0.602801, 0.608696, 0.614469, 0.620117, 0.625636, 0.631020, 0.636267, 0.641372, 0.646331, 0.651140, 0.655796, 0.660296, 0.664636, 0.668811, 0.672821, 0.676660, 0.680326, 0.683817, 0.687129, 0.690261, 0.693208, 0.695970, 0.698544, 0.700928, 0.703120, 0.705118, 0.706921, 0.708527, 0.709936, 0.711145, 0.712154, 0.712963, 0.713569, 0.713974, 0.714177, 0.714177, 0.713974, 0.713569, 0.712963, 0.712154, 0.711145, 0.709936, 0.708527, 0.706921, 0.705118, 0.703120, 0.700928, 0.698544, 0.695970, 0.693208, 0.690261, 0.687129, 0.683817, 0.680326, 0.676660, 0.672821, 0.668811, 0.664636, 0.660296, 0.655796, 0.651140, 0.646331, 0.641372, 0.636267, 0.631020, 0.625636, 0.620117, 0.614469, 0.608696, 0.602801, 0.596789, 0.590664, 0.584431, 0.578095, 0.571660, 0.565130, 0.558510, 0.551805, 0.545019, 0.538158, 0.531225, 0.524227, 0.517166, 0.510048, 0.502878,
	 0.509896, 0.517166, 0.524383, 0.531542, 0.538639, 0.545668, 0.552625, 0.559505, 0.566304, 0.573016, 0.579637, 0.586162, 0.592587, 0.598907, 0.605117, 0.611212, 0.617190, 0.623044, 0.628771, 0.634366, 0.639826, 0.645146, 0.650322, 0.655350, 0.660227, 0.664948, 0.669510, 0.673910, 0.678145, 0.682210, 0.686103, 0.689820, 0.693360, 0.696718, 0.699893, 0.702882, 0.705682, 0.708292, 0.710709, 0.712932, 0.714958, 0.716786, 0.718415, 0.719843, 0.721069, 0.722092, 0.722912, 0.723527, 0.723938, 0.724143, 0.724143, 0.723938, 0.723527, 0.722912, 0.722092, 0.721069, 0.719843, 0.718415, 0.716786, 0.714958, 0.712932, 0.710709, 0.708292, 0.705682, 0.702882, 0.699893, 0.696718, 0.693360, 0.689820, 0.686103, 0.682210, 0.678145, 0.673910, 0.669510, 0.664948, 0.660227, 0.655350, 0.650322, 0.645146, 0.639826, 0.634366, 0.628771, 0.623044, 0.617190, 0.611212, 0.605117, 0.598907, 0.592587, 0.586162, 0.579637, 0.573016, 0.566304, 0.559505, 0.552625, 0.545668, 0.538639, 0.531542, 0.524383, 0.517166, 0.509896,
	 0.516857, 0.524227, 0.531542, 0.538799, 0.545992, 0.553118, 0.560170, 0.567144, 0.574035, 0.580839, 0.587551, 0.594165, 0.600677, 0.607083, 0.613378, 0.619557, 0.625616, 0.631550, 0.637355, 0.643027, 0.648561, 0.653954, 0.659200, 0.664297, 0.669240, 0.674026, 0.678651, 0.683111, 0.687403, 0.691524, 0.695470, 0.699238, 0.702826, 0.706230, 0.709448, 0.712478, 0.715317, 0.717962, 0.720412, 0.722665, 0.724719, 0.726572, 0.728223, 0.729671, 0.730913, 0.731951, 0.732781, 0.733405, 0.733821, 0.734029, 0.734029, 0.733821, 0.733405, 0.732781, 0.731951, 0.730913, 0.729671, 0.728223, 0.726572, 0.724719, 0.722665, 0.720412, 0.717962, 0.715317, 0.712478, 0.709448, 0.706230, 0.702826, 0.699238, 0.695470, 0.691524, 0.687403, 0.683111, 0.678651, 0.674026, 0.669240, 0.664297, 0.659200, 0.653954, 0.648561, 0.643027, 0.637355, 0.631550, 0.625616, 0.619557, 0.613378, 0.607083, 0.600677, 0.594165, 0.587551, 0.580839, 0.574035, 0.567144, 0.560170, 0.553118, 0.545992, 0.538799, 0.531542, 0.524227, 0.516857,
	 0.523758, 0.531225, 0.538639, 0.545992, 0.553282, 0.560502, 0.567649, 0.574716, 0.581699, 0.588594, 0.595395, 0.602098, 0.608697, 0.615188, 0.621567, 0.627829, 0.633969, 0.639982, 0.645865, 0.651612, 0.657220, 0.662685, 0.668001, 0.673166, 0.678175, 0.683025, 0.687712, 0.692231, 0.696581, 0.700756, 0.704755, 0.708574, 0.712209, 0.715659, 0.718920, 0.721990, 0.724867, 0.727548, 0.730031, 0.732313, 0.734395, 0.736273, 0.737946, 0.739412, 0.740672, 0.741723, 0.742565, 0.743197, 0.743618, 0.743829, 0.743829, 0.743618, 0.743197, 0.742565, 0.741723, 0.740672, 0.739412, 0.737946, 0.736273, 0.734395, 0.732313, 0.730031, 0.727548, 0.724867, 0.721990, 0.718920, 0.715659, 0.712209, 0.708574, 0.704755, 0.700756, 0.696581, 0.692231, 0.687712, 0.683025, 0.678175, 0.673166, 0.668001, 0.662685, 0.657220, 0.651612, 0.645865, 0.639982, 0.633969, 0.627829, 0.621567, 0.615188, 0.608697, 0.602098, 0.595395, 0.588594, 0.581699, 0.574716, 0.567649, 0.560502, 0.553282, 0.545992, 0.538639, 0.531225, 0.523758,
	 0.530593, 0.538158, 0.545668, 0.553118, 0.560502, 0.567817, 0.575057, 0.582216, 0.589291, 0.596275, 0.603165, 0.609955, 0.616640, 0.623217, 0.629679, 0.636022, 0.642242, 0.648334, 0.654293, 0.660116, 0.665797, 0.671333, 0.676719, 0.681951, 0.687026, 0.691939, 0.696686, 0.701265, 0.705671, 0.709901, 0.713952, 0.717820, 0.721504, 0.724998, 0.728302, 0.731412, 0.734327, 0.737042, 0.739558, 0.741870, 0.743979, 0.745881, 0.747576, 0.749062, 0.750338, 0.751402, 0.752255, 0.752896, 0.753323, 0.753536, 0.753536, 0.753323, 0.752896, 0.752255, 0.751402, 0.750338, 0.749062, 0.747576, 0.745881, 0.743979, 0.741870, 0.739558, 0.737042, 0.734327, 0.731412, 0.728302, 0.724998, 0.721504, 0.717820, 0.713952, 0.709901, 0.705671, 0.701265, 0.696686, 0.691939, 0.687026, 0.681951, 0.676719, 0.671333, 0.665797, 0.660116, 0.654293, 0.648334, 0.642242, 0.636022, 0.629679, 0.623217, 0.616640, 0.609955, 0.603165, 0.596275, 0.589291, 0.582216, 0.575057, 0.567817, 0.560502, 0.553118, 0.545668, 0.538158, 0.530593,
	 0.537358, 0.545019, 0.552625, 0.560170, 0.567649, 0.575057, 0.582388, 0.589639, 0.596804, 0.603878, 0.610855, 0.617732, 0.624503, 0.631163, 0.637707, 0.644131, 0.650430, 0.656600, 0.662635, 0.668532, 0.674286, 0.679892, 0.685347, 0.690646, 0.695785, 0.700761, 0.705569, 0.710206, 0.714668, 0.718952, 0.723055, 0.726973, 0.730703, 0.734242, 0.737588, 0.740738, 0.743689, 0.746439, 0.748987, 0.751329, 0.753464, 0.755391, 0.757107, 0.758612, 0.759904, 0.760983, 0.761846, 0.762495, 0.762927, 0.763144, 0.763144, 0.762927, 0.762495, 0.761846, 0.760983, 0.759904, 0.758612, 0.757107, 0.755391, 0.753464, 0.751329, 0.748987, 0.746439, 0.743689, 0.740738, 0.737588, 0.734242, 0.730703, 0.726973, 0.723055, 0.718952, 0.714668, 0.710206, 0.705569, 0.700761, 0.695785, 0.690646, 0.685347, 0.679892, 0.674286, 0.668532, 0.662635, 0.656600, 0.650430, 0.644131, 0.637707, 0.631163, 0.624503, 0.617732, 0.610855, 0.603878, 0.596804, 0.589639, 0.582388, 0.575057, 0.567649, 0.560170, 0.552625, 0.545019, 0.537358,
	 0.544048, 0.551805, 0.559505, 0.567144, 0.574716, 0.582216, 0.589639, 0.596980, 0.604234, 0.611396, 0.618460, 0.625423, 0.632278, 0.639021, 0.645647, 0.652151, 0.658528, 0.664775, 0.670885, 0.676855, 0.682681, 0.688357, 0.693879, 0.699244, 0.704448, 0.709485, 0.714353, 0.719048, 0.723566, 0.727903, 0.732057, 0.736023, 0.739800, 0.743383, 0.746771, 0.749960, 0.752948, 0.755733, 0.758312, 0.760683, 0.762845, 0.764796, 0.766533, 0.768057, 0.769365, 0.770457, 0.771331, 0.771988, 0.772426, 0.772645, 0.772645, 0.772426, 0.771988, 0.771331, 0.770457, 0.769365, 0.768057, 0.766533, 0.764796, 0.762845, 0.760683, 0.758312, 0.755733, 0.752948, 0.749960, 0.746771, 0.743383, 0.739800, 0.736023, 0.732057, 0.727903, 0.723566, 0.719048, 0.714353, 0.709485, 0.704448, 0.699244, 0.693879, 0.688357, 0.682681, 0.676855, 0.670885, 0.664775, 0.658528, 0.652151, 0.645647, 0.639021, 0.632278, 0.625423, 0.618460, 0.611396, 0.604234, 0.596980, 0.589639, 0.582216, 0.574716, 0.567144, 0.559505, 0.551805, 0.544048,
	 0.550659, 0.558510, 0.566304, 0.574035, 0.581699, 0.589291, 0.596804, 0.604234, 0.611576, 0.618825, 0.625975, 0.633022, 0.639960, 0.646785, 0.653492, 0.660075, 0.666530, 0.672852, 0.679037, 0.685080, 0.690976, 0.696721, 0.702311, 0.707741, 0.713007, 0.718106, 0.723033, 0.727785, 0.732358, 0.736748, 0.740952, 0.744967, 0.748789, 0.752416, 0.755845, 0.759073, 0.762097, 0.764916, 0.767526, 0.769926, 0.772114, 0.774089, 0.775847, 0.777390, 0.778714, 0.779819, 0.780704, 0.781368, 0.781812, 0.782033, 0.782033, 0.781812, 0.781368, 0.780704, 0.779819, 0.778714, 0.777390, 0.775847, 0.774089, 0.772114, 0.769926, 0.767526, 0.764916, 0.762097, 0.759073, 0.755845, 0.752416, 0.748789, 0.744967, 0.740952, 0.736748, 0.732358, 0.727785, 0.723033, 0.718106, 0.713007, 0.707741, 0.702311, 0.696721, 0.690976, 0.685080, 0.679037, 0.672852, 0.666530, 0.660075, 0.653492, 0.646785, 0.639960, 0.633022, 0.625975, 0.618825, 0.611576, 0.604234, 0.596804, 0.589291, 0.581699, 0.574035, 0.566304, 0.558510, 0.550659,
	 0.557186, 0.565130, 0.573016, 0.580839, 0.588594, 0.596275, 0.603878, 0.611396, 0.618825, 0.626160, 0.633395, 0.640525, 0.647546, 0.654451, 0.661237, 0.667899, 0.674430, 0.680827, 0.687086, 0.693200, 0.699166, 0.704979, 0.710635, 0.716130, 0.721458, 0.726618, 0.731603, 0.736411, 0.741038, 0.745480, 0.749734, 0.753797, 0.757664, 0.761334, 0.764804, 0.768070, 0.771130, 0.773982, 0.776623, 0.779052, 0.781266, 0.783263, 0.785043, 0.786604, 0.787944, 0.789062, 0.789957, 0.790630, 0.791078, 0.791302, 0.791302, 0.791078, 0.790630, 0.789957, 0.789062, 0.787944, 0.786604, 0.785043, 0.783263, 0.781266, 0.779052, 0.776623, 0.773982, 0.771130, 0.768070, 0.764804, 0.761334, 0.757664, 0.753797, 0.749734, 0.745480, 0.741038, 0.736411, 0.731603, 0.726618, 0.721458, 0.716130, 0.710635, 0.704979, 0.699166, 0.693200, 0.687086, 0.680827, 0.674430, 0.667899, 0.661237, 0.654451, 0.647546, 0.640525, 0.633395, 0.626160, 0.618825, 0.611396, 0.603878, 0.596275, 0.588594, 0.580839, 0.573016, 0.565130, 0.557186,
	 0.563624, 0.571660, 0.579637, 0.587551, 0.595395, 0.603165, 0.610855, 0.618460, 0.625975, 0.633395, 0.640713, 0.647926, 0.655028, 0.662013, 0.668878, 0.675616, 0.682223, 0.688694, 0.695025, 0.701210, 0.707244, 0.713125, 0.718846, 0.724404, 0.729795, 0.735013, 0.740057, 0.744920, 0.749601, 0.754094, 0.758397, 0.762506, 0.766419, 0.770131, 0.773641, 0.776945, 0.780040, 0.782925, 0.785597, 0.788053, 0.790293, 0.792314, 0.794114, 0.795693, 0.797048, 0.798179, 0.799085, 0.799765, 0.800219, 0.800446, 0.800446, 0.800219, 0.799765, 0.799085, 0.798179, 0.797048, 0.795693, 0.794114, 0.792314, 0.790293, 0.788053, 0.785597, 0.782925, 0.780040, 0.776945, 0.773641, 0.770131, 0.766419, 0.762506, 0.758397, 0.754094, 0.749601, 0.744920, 0.740057, 0.735013, 0.729795, 0.724404, 0.718846, 0.713125, 0.707244, 0.701210, 0.695025, 0.688694, 0.682223, 0.675616, 0.668878, 0.662013, 0.655028, 0.647926, 0.640713, 0.633395, 0.625975, 0.618460, 0.610855, 0.603165, 0.595395, 0.587551, 0.579637, 0.571660, 0.563624,
	 0.569969, 0.578095, 0.586162, 0.594165, 0.602098, 0.609955, 0.617732, 0.625423, 0.633022, 0.640525, 0.647926, 0.655220, 0.662402, 0.669466, 0.676408, 0.683222, 0.689903, 0.696447, 0.702849, 0.709103, 0.715206, 0.721153, 0.726938, 0.732559, 0.738010, 0.743288, 0.748388, 0.753306, 0.758039, 0.762583, 0.766935, 0.771090, 0.775047, 0.778801, 0.782350, 0.785691, 0.788821, 0.791739, 0.794440, 0.796925, 0.799190, 0.801233, 0.803054, 0.804650, 0.806021, 0.807164, 0.808081, 0.808768, 0.809227, 0.809457, 0.809457, 0.809227, 0.808768, 0.808081, 0.807164, 0.806021, 0.804650, 0.803054, 0.801233, 0.799190, 0.796925, 0.794440, 0.791739, 0.788821, 0.785691, 0.782350, 0.778801, 0.775047, 0.771090, 0.766935, 0.762583, 0.758039, 0.753306, 0.748388, 0.743288, 0.738010, 0.732559, 0.726938, 0.721153, 0.715206, 0.709103, 0.702849, 0.696447, 0.689903, 0.683222, 0.676408, 0.669466, 0.662402, 0.655220, 0.647926, 0.640525, 0.633022, 0.625423, 0.617732, 0.609955, 0.602098, 0.594165, 0.586162, 0.578095, 0.569969,
	 0.576216, 0.584431, 0.592587, 0.600677, 0.608697, 0.616640, 0.624503, 0.632278, 0.639960, 0.647546, 0.655028, 0.662402, 0.669662, 0.676804, 0.683821, 0.690710, 0.697465, 0.704081, 0.710552, 0.716876, 0.723045, 0.729057, 0.734906, 0.740588, 0.746099, 0.751435, 0.756591, 0.761563, 0.766348, 0.770942, 0.775341, 0.779542, 0.783542, 0.787337, 0.790925, 0.794303, 0.797467, 0.800417, 0.803148, 0.805660, 0.807949, 0.810015, 0.811856, 0.813470, 0.814855, 0.816012, 0.816938, 0.817633, 0.818097, 0.818329, 0.818329, 0.818097, 0.817633, 0.816938, 0.816012, 0.814855, 0.813470, 0.811856, 0.810015, 0.807949, 0.805660, 0.803148, 0.800417, 0.797467, 0.794303, 0.790925, 0.787337, 0.783542, 0.779542, 0.775341, 0.770942, 0.766348, 0.761563, 0.756591, 0.751435, 0.746099, 0.740588, 0.734906, 0.729057, 0.723045, 0.716876, 0.710552, 0.704081, 0.697465, 0.690710, 0.683821, 0.676804, 0.669662, 0.662402, 0.655028, 0.647546, 0.639960, 0.632278, 0.624503, 0.616640, 0.608697, 0.600677, 0.592587, 0.584431, 0.576216,
	 0.582361, 0.590664, 0.598907, 0.607083, 0.615188, 0.623217, 0.631163, 0.639021, 0.646785, 0.654451, 0.662013, 0.669466, 0.676804, 0.684021, 0.691114, 0.698076, 0.704903, 0.711589, 0.718130, 0.724521, 0.730756, 0.736832, 0.742744, 0.748486, 0.754056, 0.759448, 0.764659, 0.769685, 0.774521, 0.779163, 0.783609, 0.787855, 0.791898, 0.795734, 0.799360, 0.802773, 0.805972, 0.808953, 0.811713, 0.814252, 0.816566, 0.818654, 0.820514, 0.822145, 0.823545, 0.824714, 0.825650, 0.826353, 0.826821, 0.827056, 0.827056, 0.826821, 0.826353, 0.825650, 0.824714, 0.823545, 0.822145, 0.820514, 0.818654, 0.816566, 0.814252, 0.811713, 0.808953, 0.805972, 0.802773, 0.799360, 0.795734, 0.791898, 0.787855, 0.783609, 0.779163, 0.774521, 0.769685, 0.764659, 0.759448, 0.754056, 0.748486, 0.742744, 0.736832, 0.730756, 0.724521, 0.718130, 0.711589, 0.704903, 0.698076, 0.691114, 0.684021, 0.676804, 0.669466, 0.662013, 0.654451, 0.646785, 0.639021, 0.631163, 0.623217, 0.615188, 0.607083, 0.598907, 0.590664, 0.582361,
	 0.588399, 0.596789, 0.605117, 0.613378, 0.621567, 0.629679, 0.637707, 0.645647, 0.653492, 0.661237, 0.668878, 0.676408, 0.683821, 0.691114, 0.698280, 0.705315, 0.712212, 0.718968, 0.725576, 0.732033, 0.738333, 0.744472, 0.750445, 0.756247, 0.761875, 0.767323, 0.772588, 0.777665, 0.782551, 0.787242, 0.791735, 0.796025, 0.800109, 0.803985, 0.807648, 0.811097, 0.814329, 0.817341, 0.820130, 0.822695, 0.825033, 0.827142, 0.829022, 0.830670, 0.832084, 0.833265, 0.834211, 0.834921, 0.835395, 0.835632, 0.835632, 0.835395, 0.834921, 0.834211, 0.833265, 0.832084, 0.830670, 0.829022, 0.827142, 0.825033, 0.822695, 0.820130, 0.817341, 0.814329, 0.811097, 0.807648, 0.803985, 0.800109, 0.796025, 0.791735, 0.787242, 0.782551, 0.777665, 0.772588, 0.767323, 0.761875, 0.756247, 0.750445, 0.744472, 0.738333, 0.732033, 0.725576, 0.718968, 0.712212, 0.705315, 0.698280, 0.691114, 0.683821, 0.676408, 0.668878, 0.661237, 0.653492, 0.645647, 0.637707, 0.629679, 0.621567, 0.613378, 0.605117, 0.596789, 0.588399,
	 0.594327, 0.602801, 0.611212, 0.619557, 0.627829, 0.636022, 0.644131, 0.652151, 0.660075, 0.667899, 0.675616, 0.683222, 0.690710, 0.698076, 0.705315, 0.712420, 0.719387, 0.726210, 0.732886, 0.739408, 0.745771, 0.751972, 0.758005, 0.763866, 0.769550, 0.775053, 0.780371, 0.785499, 0.790435, 0.795173, 0.799710, 0.804044, 0.808169, 0.812084, 0.815784, 0.819268, 0.822532, 0.825574, 0.828392, 0.830982, 0.833344, 0.835475, 0.837373, 0.839038, 0.840467, 0.841659, 0.842615, 0.843332, 0.843810, 0.844050, 0.844050, 0.843810, 0.843332, 0.842615, 0.841659, 0.840467, 0.839038, 0.837373, 0.835475, 0.833344, 0.830982, 0.828392, 0.825574, 0.822532, 0.819268, 0.815784, 0.812084, 0.808169, 0.804044, 0.799710, 0.795173, 0.790435, 0.785499, 0.780371, 0.775053, 0.769550, 0.763866, 0.758005, 0.751972, 0.745771, 0.739408, 0.732886, 0.726210, 0.719387, 0.712420, 0.705315, 0.698076, 0.690710, 0.683222, 0.675616, 0.667899, 0.660075, 0.652151, 0.644131, 0.636022, 0.627829, 0.619557, 0.611212, 0.602801, 0.594327,
	 0.600139, 0.608696, 0.617190, 0.625616, 0.633969, 0.642242, 0.650430, 0.658528, 0.666530, 0.674430, 0.682223, 0.689903, 0.697465, 0.704903, 0.712212, 0.719387, 0.726422, 0.733312, 0.740053, 0.746639, 0.753064, 0.759326, 0.765418, 0.771336, 0.777076, 0.782633, 0.788002, 0.793181, 0.798165, 0.802949, 0.807531, 0.811907, 0.816073, 0.820025, 0.823762, 0.827280, 0.830576, 0.833648, 0.836493, 0.839109, 0.841493, 0.843645, 0.845562, 0.847243, 0.848686, 0.849890, 0.850855, 0.851579, 0.852062, 0.852304, 0.852304, 0.852062, 0.851579, 0.850855, 0.849890, 0.848686, 0.847243, 0.845562, 0.843645, 0.841493, 0.839109, 0.836493, 0.833648, 0.830576, 0.827280, 0.823762, 0.820025, 0.816073, 0.811907, 0.807531, 0.802949, 0.798165, 0.793181, 0.788002, 0.782633, 0.777076, 0.771336, 0.765418, 0.759326, 0.753064, 0.746639, 0.740053, 0.733312, 0.726422, 0.719387, 0.712212, 0.704903, 0.697465, 0.689903, 0.682223, 0.674430, 0.666530, 0.658528, 0.650430, 0.642242, 0.633969, 0.625616, 0.617190, 0.608696, 0.600139,
	 0.605832, 0.614469, 0.623044, 0.631550, 0.639982, 0.648334, 0.656600, 0.664775, 0.672852, 0.680827, 0.688694, 0.696447, 0.704081, 0.711589, 0.718968, 0.726210, 0.733312, 0.740268, 0.747073, 0.753721, 0.760208, 0.766528, 0.772678, 0.778652, 0.784446, 0.790056, 0.795477, 0.800705, 0.805736, 0.810566, 0.815191, 0.819608, 0.823813, 0.827804, 0.831576, 0.835127, 0.838455, 0.841555, 0.844427, 0.847068, 0.849475, 0.851647, 0.853583, 0.855279, 0.856736, 0.857952, 0.858926, 0.859657, 0.860144, 0.860388, 0.860388, 0.860144, 0.859657, 0.858926, 0.857952, 0.856736, 0.855279, 0.853583, 0.851647, 0.849475, 0.847068, 0.844427, 0.841555, 0.838455, 0.835127, 0.831576, 0.827804, 0.823813, 0.819608, 0.815191, 0.810566, 0.805736, 0.800705, 0.795477, 0.790056, 0.784446, 0.778652, 0.772678, 0.766528, 0.760208, 0.753721, 0.747073, 0.740268, 0.733312, 0.726210, 0.718968, 0.711589, 0.704081, 0.696447, 0.688694, 0.680827, 0.672852, 0.664775, 0.656600, 0.648334, 0.639982, 0.631550, 0.623044, 0.614469, 0.605832,
	 0.611400, 0.620117, 0.628771, 0.637355, 0.645865, 0.654293, 0.662635, 0.670885, 0.679037, 0.687086, 0.695025, 0.702849, 0.710552, 0.718130, 0.725576, 0.732886, 0.740053, 0.747073, 0.753940, 0.760649, 0.767195, 0.773574, 0.779780, 0.785810, 0.791657, 0.797318, 0.802789, 0.808065, 0.813142, 0.818016, 0.822684, 0.827142, 0.831386, 0.835413, 0.839220, 0.842804, 0.846162, 0.849291, 0.852189, 0.854854, 0.857284, 0.859476, 0.861429, 0.863141, 0.864611, 0.865838, 0.866821, 0.867559, 0.868051, 0.868297, 0.868297, 0.868051, 0.867559, 0.866821, 0.865838, 0.864611, 0.863141, 0.861429, 0.859476, 0.857284, 0.854854, 0.852189, 0.849291, 0.846162, 0.842804, 0.839220, 0.835413, 0.831386, 0.827142, 0.822684, 0.818016, 0.813142, 0.808065, 0.802789, 0.797318, 0.791657, 0.785810, 0.779780, 0.773574, 0.767195, 0.760649, 0.753940, 0.747073, 0.740053, 0.732886, 0.725576, 0.718130, 0.710552, 0.702849, 0.695025, 0.687086, 0.679037, 0.670885, 0.662635, 0.654293, 0.645865, 0.637355, 0.628771, 0.620117, 0.611400,
	 0.616841, 0.625636, 0.634366, 0.643027, 0.651612, 0.660116, 0.668532, 0.676855, 0.685080, 0.693200, 0.701210, 0.709103, 0.716876, 0.724521, 0.732033, 0.739408, 0.746639, 0.753721, 0.760649, 0.767418, 0.774022, 0.780458, 0.786720, 0.792802, 0.798702, 0.804413, 0.809933, 0.815256, 0.820378, 0.825296, 0.830005, 0.834502, 0.838784, 0.842847, 0.846688, 0.850304, 0.853691, 0.856849, 0.859773, 0.862461, 0.864913, 0.867124, 0.869094, 0.870822, 0.872305, 0.873543, 0.874535, 0.875279, 0.875775, 0.876024, 0.876024, 0.875775, 0.875279, 0.874535, 0.873543, 0.872305, 0.870822, 0.869094, 0.867124, 0.864913, 0.862461, 0.859773, 0.856849, 0.853691, 0.850304, 0.846688, 0.842847, 0.838784, 0.834502, 0.830005, 0.825296, 0.820378, 0.815256, 0.809933, 0.804413, 0.798702, 0.792802, 0.786720, 0.780458, 0.774022, 0.767418, 0.760649, 0.753721, 0.746639, 0.739408, 0.732033, 0.724521, 0.716876, 0.709103, 0.701210, 0.693200, 0.685080, 0.676855, 0.668532, 0.660116, 0.651612, 0.643027, 0.634366, 0.625636, 0.616841,
	 0.622150, 0.631020, 0.639826, 0.648561, 0.657220, 0.665797, 0.674286, 0.682681, 0.690976, 0.699166, 0.707244, 0.715206, 0.723045, 0.730756, 0.738333, 0.745771, 0.753064, 0.760208, 0.767195, 0.774022, 0.780684, 0.787175, 0.793490, 0.799626, 0.805576, 0.811337, 0.816903, 0.822272, 0.827438, 0.832399, 0.837148, 0.841684, 0.846003, 0.850101, 0.853975, 0.857622, 0.861039, 0.864223, 0.867172, 0.869884, 0.872356, 0.874587, 0.876574, 0.878317, 0.879813, 0.881061, 0.882061, 0.882812, 0.883313, 0.883563, 0.883563, 0.883313, 0.882812, 0.882061, 0.881061, 0.879813, 0.878317, 0.876574, 0.874587, 0.872356, 0.869884, 0.867172, 0.864223, 0.861039, 0.857622, 0.853975, 0.850101, 0.846003, 0.841684, 0.837148, 0.832399, 0.827438, 0.822272, 0.816903, 0.811337, 0.805576, 0.799626, 0.793490, 0.787175, 0.780684, 0.774022, 0.767195, 0.760208, 0.753064, 0.745771, 0.738333, 0.730756, 0.723045, 0.715206, 0.707244, 0.699166, 0.690976, 0.682681, 0.674286, 0.665797, 0.657220, 0.648561, 0.639826, 0.631020, 0.622150,
	 0.627323, 0.636267, 0.645146, 0.653954, 0.662685, 0.671333, 0.679892, 0.688357, 0.696721, 0.704979, 0.713125, 0.721153, 0.729057, 0.736832, 0.744472, 0.751972, 0.759326, 0.766528, 0.773574, 0.780458, 0.787175, 0.793720, 0.800088, 0.806274, 0.812274, 0.818082, 0.823696, 0.829109, 0.834318, 0.839319, 0.844109, 0.848683, 0.853037, 0.857169, 0.861075, 0.864752, 0.868198, 0.871409, 0.874382, 0.877117, 0.879610, 0.881859, 0.883863, 0.885619, 0.887128, 0.888387, 0.889395, 0.890152, 0.890657, 0.890910, 0.890910, 0.890657, 0.890152, 0.889395, 0.888387, 0.887128, 0.885619, 0.883863, 0.881859, 0.879610, 0.877117, 0.874382, 0.871409, 0.868198, 0.864752, 0.861075, 0.857169, 0.853037, 0.848683, 0.844109, 0.839319, 0.834318, 0.829109, 0.823696, 0.818082, 0.812274, 0.806274, 0.800088, 0.793720, 0.787175, 0.780458, 0.773574, 0.766528, 0.759326, 0.751972, 0.744472, 0.736832, 0.729057, 0.721153, 0.713125, 0.704979, 0.696721, 0.688357, 0.679892, 0.671333, 0.662685, 0.653954, 0.645146, 0.636267, 0.627323,
	 0.632356, 0.641372, 0.650322, 0.659200, 0.668001, 0.676719, 0.685347, 0.693879, 0.702311, 0.710635, 0.718846, 0.726938, 0.734906, 0.742744, 0.750445, 0.758005, 0.765418, 0.772678, 0.779780, 0.786720, 0.793490, 0.800088, 0.806507, 0.812743, 0.818791, 0.824646, 0.830304, 0.835761, 0.841012, 0.846053, 0.850881, 0.855492, 0.859881, 0.864046, 0.867984, 0.871690, 0.875163, 0.878400, 0.881398, 0.884154, 0.886667, 0.888934, 0.890954, 0.892725, 0.894245, 0.895514, 0.896531, 0.897294, 0.897803, 0.898057, 0.898057, 0.897803, 0.897294, 0.896531, 0.895514, 0.894245, 0.892725, 0.890954, 0.888934, 0.886667, 0.884154, 0.881398, 0.878400, 0.875163, 0.871690, 0.867984, 0.864046, 0.859881, 0.855492, 0.850881, 0.846053, 0.841012, 0.835761, 0.830304, 0.824646, 0.818791, 0.812743, 0.806507, 0.800088, 0.793490, 0.786720, 0.779780, 0.772678, 0.765418, 0.758005, 0.750445, 0.742744, 0.734906, 0.726938, 0.718846, 0.710635, 0.702311, 0.693879, 0.685347, 0.676719, 0.668001, 0.659200, 0.650322, 0.641372, 0.632356,
	 0.637245, 0.646331, 0.655350, 0.664297, 0.673166, 0.681951, 0.690646, 0.699244, 0.707741, 0.716130, 0.724404, 0.732559, 0.740588, 0.748486, 0.756247, 0.763866, 0.771336, 0.778652, 0.785810, 0.792802, 0.799626, 0.806274, 0.812743, 0.819027, 0.825121, 0.831022, 0.836724, 0.842223, 0.847514, 0.852595, 0.857460, 0.862106, 0.866530, 0.870727, 0.874695, 0.878430, 0.881930, 0.885192, 0.888212, 0.890990, 0.893522, 0.895807, 0.897842, 0.899627, 0.901159, 0.902438, 0.903463, 0.904231, 0.904744, 0.905001, 0.905001, 0.904744, 0.904231, 0.903463, 0.902438, 0.901159, 0.899627, 0.897842, 0.895807, 0.893522, 0.890990, 0.888212, 0.885192, 0.881930, 0.878430, 0.874695, 0.870727, 0.866530, 0.862106, 0.857460, 0.852595, 0.847514, 0.842223, 0.836724, 0.831022, 0.825121, 0.819027, 0.812743, 0.806274, 0.799626, 0.792802, 0.785810, 0.778652, 0.771336, 0.763866, 0.756247, 0.748486, 0.740588, 0.732559, 0.724404, 0.716130, 0.707741, 0.699244, 0.690646, 0.681951, 0.673166, 0.664297, 0.655350, 0.646331, 0.637245,
	 0.641987, 0.651140, 0.660227, 0.669240, 0.678175, 0.687026, 0.695785, 0.704448, 0.713007, 0.721458, 0.729795, 0.738010, 0.746099, 0.754056, 0.761875, 0.769550, 0.777076, 0.784446, 0.791657, 0.798702, 0.805576, 0.812274, 0.818791, 0.825121, 0.831261, 0.837206, 0.842950, 0.848490, 0.853821, 0.858939, 0.863841, 0.868521, 0.872978, 0.877206, 0.881204, 0.884967, 0.888493, 0.891779, 0.894822, 0.897620, 0.900171, 0.902473, 0.904524, 0.906321, 0.907865, 0.909154, 0.910185, 0.910960, 0.911477, 0.911735, 0.911735, 0.911477, 0.910960, 0.910185, 0.909154, 0.907865, 0.906321, 0.904524, 0.902473, 0.900171, 0.897620, 0.894822, 0.891779, 0.888493, 0.884967, 0.881204, 0.877206, 0.872978, 0.868521, 0.863841, 0.858939, 0.853821, 0.848490, 0.842950, 0.837206, 0.831261, 0.825121, 0.818791, 0.812274, 0.805576, 0.798702, 0.791657, 0.784446, 0.777076, 0.769550, 0.761875, 0.754056, 0.746099, 0.738010, 0.729795, 0.721458, 0.713007, 0.704448, 0.695785, 0.687026, 0.678175, 0.669240, 0.660227, 0.651140, 0.641987,
	 0.646578, 0.655796, 0.664948, 0.674026, 0.683025, 0.691939, 0.700761, 0.709485, 0.718106, 0.726618, 0.735013, 0.743288, 0.751435, 0.759448, 0.767323, 0.775053, 0.782633, 0.790056, 0.797318, 0.804413, 0.811337, 0.818082, 0.824646, 0.831022, 0.837206, 0.843193, 0.848978, 0.854558, 0.859927, 0.865082, 0.870018, 0.874732, 0.879220, 0.883479, 0.887505, 0.891295, 0.894846, 0.898156, 0.901221, 0.904039, 0.906608, 0.908927, 0.910992, 0.912803, 0.914357, 0.915655, 0.916694, 0.917474, 0.917995, 0.918255, 0.918255, 0.917995, 0.917474, 0.916694, 0.915655, 0.914357, 0.912803, 0.910992, 0.908927, 0.906608, 0.904039, 0.901221, 0.898156, 0.894846, 0.891295, 0.887505, 0.883479, 0.879220, 0.874732, 0.870018, 0.865082, 0.859927, 0.854558, 0.848978, 0.843193, 0.837206, 0.831022, 0.824646, 0.818082, 0.811337, 0.804413, 0.797318, 0.790056, 0.782633, 0.775053, 0.767323, 0.759448, 0.751435, 0.743288, 0.735013, 0.726618, 0.718106, 0.709485, 0.700761, 0.691939, 0.683025, 0.674026, 0.664948, 0.655796, 0.646578,
	 0.651014, 0.660296, 0.669510, 0.678651, 0.687712, 0.696686, 0.705569, 0.714353, 0.723033, 0.731603, 0.740057, 0.748388, 0.756591, 0.764659, 0.772588, 0.780371, 0.788002, 0.795477, 0.802789, 0.809933, 0.816903, 0.823696, 0.830304, 0.836724, 0.842950, 0.848978, 0.854803, 0.860421, 0.865827, 0.871017, 0.875987, 0.880734, 0.885253, 0.889541, 0.893595, 0.897411, 0.900986, 0.904318, 0.907404, 0.910242, 0.912829, 0.915163, 0.917242, 0.919066, 0.920631, 0.921938, 0.922984, 0.923770, 0.924294, 0.924556, 0.924556, 0.924294, 0.923770, 0.922984, 0.921938, 0.920631, 0.919066, 0.917242, 0.915163, 0.912829, 0.910242, 0.907404, 0.904318, 0.900986, 0.897411, 0.893595, 0.889541, 0.885253, 0.880734, 0.875987, 0.871017, 0.865827, 0.860421, 0.854803, 0.848978, 0.842950, 0.836724, 0.830304, 0.823696, 0.816903, 0.809933, 0.802789, 0.795477, 0.788002, 0.780371, 0.772588, 0.764659, 0.756591, 0.748388, 0.740057, 0.731603, 0.723033, 0.714353, 0.705569, 0.696686, 0.687712, 0.678651, 0.669510, 0.660296, 0.651014,
	 0.655293, 0.664636, 0.673910, 0.683111, 0.692231, 0.701265, 0.710206, 0.719048, 0.727785, 0.736411, 0.744920, 0.753306, 0.761563, 0.769685, 0.777665, 0.785499, 0.793181, 0.800705, 0.808065, 0.815256, 0.822272, 0.829109, 0.835761, 0.842223, 0.848490, 0.854558, 0.860421, 0.866076, 0.871517, 0.876741, 0.881744, 0.886522, 0.891071, 0.895387, 0.899467, 0.903308, 0.906907, 0.910261, 0.913368, 0.916224, 0.918828, 0.921177, 0.923271, 0.925106, 0.926681, 0.927996, 0.929050, 0.929840, 0.930368, 0.930632, 0.930632, 0.930368, 0.929840, 0.929050, 0.927996, 0.926681, 0.925106, 0.923271, 0.921177, 0.918828, 0.916224, 0.913368, 0.910261, 0.906907, 0.903308, 0.899467, 0.895387, 0.891071, 0.886522, 0.881744, 0.876741, 0.871517, 0.866076, 0.860421, 0.854558, 0.848490, 0.842223, 0.835761, 0.829109, 0.822272, 0.815256, 0.808065, 0.800705, 0.793181, 0.785499, 0.777665, 0.769685, 0.761563, 0.753306, 0.744920, 0.736411, 0.727785, 0.719048, 0.710206, 0.701265, 0.692231, 0.683111, 0.673910, 0.664636, 0.655293,
	 0.659410, 0.668811, 0.678145, 0.687403, 0.696581, 0.705671, 0.714668, 0.723566, 0.732358, 0.741038, 0.749601, 0.758039, 0.766348, 0.774521, 0.782551, 0.790435, 0.798165, 0.805736, 0.813142, 0.820378, 0.827438, 0.834318, 0.841012, 0.847514, 0.853821, 0.859927, 0.865827, 0.871517, 0.876993, 0.882250, 0.887284, 0.892092, 0.896669, 0.901013, 0.905119, 0.908984, 0.912606, 0.915981, 0.919106, 0.921981, 0.924601, 0.926965, 0.929071, 0.930918, 0.932504, 0.933827, 0.934887, 0.935683, 0.936214, 0.936479, 0.936479, 0.936214, 0.935683, 0.934887, 0.933827, 0.932504, 0.930918, 0.929071, 0.926965, 0.924601, 0.921981, 0.919106, 0.915981, 0.912606, 0.908984, 0.905119, 0.901013, 0.896669, 0.892092, 0.887284, 0.882250, 0.876993, 0.871517, 0.865827, 0.859927, 0.853821, 0.847514, 0.841012, 0.834318, 0.827438, 0.820378, 0.813142, 0.805736, 0.798165, 0.790435, 0.782551, 0.774521, 0.766348, 0.758039, 0.749601, 0.741038, 0.732358, 0.723566, 0.714668, 0.705671, 0.696581, 0.687403, 0.678145, 0.668811, 0.659410,
	 0.663363, 0.672821, 0.682210, 0.691524, 0.700756, 0.709901, 0.718952, 0.727903, 0.736748, 0.745480, 0.754094, 0.762583, 0.770942, 0.779163, 0.787242, 0.795173, 0.802949, 0.810566, 0.818016, 0.825296, 0.832399, 0.839319, 0.846053, 0.852595, 0.858939, 0.865082, 0.871017, 0.876741, 0.882250, 0.887539, 0.892603, 0.897440, 0.902044, 0.906414, 0.910544, 0.914433, 0.918076, 0.921471, 0.924616, 0.927507, 0.930143, 0.932522, 0.934641, 0.936499, 0.938094, 0.939425, 0.940491, 0.941292, 0.941826, 0.942093, 0.942093, 0.941826, 0.941292, 0.940491, 0.939425, 0.938094, 0.936499, 0.934641, 0.932522, 0.930143, 0.927507, 0.924616, 0.921471, 0.918076, 0.914433, 0.910544, 0.906414, 0.902044, 0.897440, 0.892603, 0.887539, 0.882250, 0.876741, 0.871017, 0.865082, 0.858939, 0.852595, 0.846053, 0.839319, 0.832399, 0.825296, 0.818016, 0.810566, 0.802949, 0.795173, 0.787242, 0.779163, 0.770942, 0.762583, 0.754094, 0.745480, 0.736748, 0.727903, 0.718952, 0.709901, 0.700756, 0.691524, 0.682210, 0.672821, 0.663363,
	 0.667148, 0.676660, 0.686103, 0.695470, 0.704755, 0.713952, 0.723055, 0.732057, 0.740952, 0.749734, 0.758397, 0.766935, 0.775341, 0.783609, 0.791735, 0.799710, 0.807531, 0.815191, 0.822684, 0.830005, 0.837148, 0.844109, 0.850881, 0.857460, 0.863841, 0.870018, 0.875987, 0.881744, 0.887284, 0.892603, 0.897697, 0.902561, 0.907192, 0.911586, 0.915740, 0.919651, 0.923315, 0.926730, 0.929892, 0.932800, 0.935451, 0.937843, 0.939974, 0.941842, 0.943447, 0.944786, 0.945858, 0.946663, 0.947200, 0.947469, 0.947469, 0.947200, 0.946663, 0.945858, 0.944786, 0.943447, 0.941842, 0.939974, 0.937843, 0.935451, 0.932800, 0.929892, 0.926730, 0.923315, 0.919651, 0.915740, 0.911586, 0.907192, 0.902561, 0.897697, 0.892603, 0.887284, 0.881744, 0.875987, 0.870018, 0.863841, 0.857460, 0.850881, 0.844109, 0.837148, 0.830005, 0.822684, 0.815191, 0.807531, 0.799710, 0.791735, 0.783609, 0.775341, 0.766935, 0.758397, 0.749734, 0.740952, 0.732057, 0.723055, 0.713952, 0.704755, 0.695470, 0.686103, 0.676660, 0.667148,
	 0.670763, 0.680326, 0.689820, 0.699238, 0.708574, 0.717820, 0.726973, 0.736023, 0.744967, 0.753797, 0.762506, 0.771090, 0.779542, 0.787855, 0.796025, 0.804044, 0.811907, 0.819608, 0.827142, 0.834502, 0.841684, 0.848683, 0.855492, 0.862106, 0.868521, 0.874732, 0.880734, 0.886522, 0.892092, 0.897440, 0.902561, 0.907451, 0.912107, 0.916525, 0.920702, 0.924634, 0.928318, 0.931751, 0.934931, 0.937854, 0.940520, 0.942925, 0.945067, 0.946946, 0.948559, 0.949905, 0.950983, 0.951792, 0.952332, 0.952602, 0.952602, 0.952332, 0.951792, 0.950983, 0.949905, 0.948559, 0.946946, 0.945067, 0.942925, 0.940520, 0.937854, 0.934931, 0.931751, 0.928318, 0.924634, 0.920702, 0.916525, 0.912107, 0.907451, 0.902561, 0.897440, 0.892092, 0.886522, 0.880734, 0.874732, 0.868521, 0.862106, 0.855492, 0.848683, 0.841684, 0.834502, 0.827142, 0.819608, 0.811907, 0.804044, 0.796025, 0.787855, 0.779542, 0.771090, 0.762506, 0.753797, 0.744967, 0.736023, 0.726973, 0.717820, 0.708574, 0.699238, 0.689820, 0.680326, 0.670763,
	 0.674205, 0.683817, 0.693360, 0.702826, 0.712209, 0.721504, 0.730703, 0.739800, 0.748789, 0.757664, 0.766419, 0.775047, 0.783542, 0.791898, 0.800109, 0.808169, 0.816073, 0.823813, 0.831386, 0.838784, 0.846003, 0.853037, 0.859881, 0.866530, 0.872978, 0.879220, 0.885253, 0.891071, 0.896669, 0.902044, 0.907192, 0.912107, 0.916787, 0.921228, 0.925426, 0.929378, 0.933081, 0.936532, 0.939728, 0.942667, 0.945346, 0.947763, 0.949916, 0.951805, 0.953426, 0.954779, 0.955862, 0.956676, 0.957219, 0.957490, 0.957490, 0.957219, 0.956676, 0.955862, 0.954779, 0.953426, 0.951805, 0.949916, 0.947763, 0.945346, 0.942667, 0.939728, 0.936532, 0.933081, 0.929378, 0.925426, 0.921228, 0.916787, 0.912107, 0.907192, 0.902044, 0.896669, 0.891071, 0.885253, 0.879220, 0.872978, 0.866530, 0.859881, 0.853037, 0.846003, 0.838784, 0.831386, 0.823813, 0.816073, 0.808169, 0.800109, 0.791898, 0.783542, 0.775047, 0.766419, 0.757664, 0.748789, 0.739800, 0.730703, 0.721504, 0.712209, 0.702826, 0.693360, 0.683817, 0.674205,
	 0.677470, 0.687129, 0.696718, 0.706230, 0.715659, 0.724998, 0.734242, 0.743383, 0.752416, 0.761334, 0.770131, 0.778801, 0.787337, 0.795734, 0.803985, 0.812084, 0.820025, 0.827804, 0.835413, 0.842847, 0.850101, 0.857169, 0.864046, 0.870727, 0.877206, 0.883479, 0.889541, 0.895387, 0.901013, 0.906414, 0.911586, 0.916525, 0.921228, 0.925690, 0.929909, 0.933880, 0.937601, 0.941068, 0.944280, 0.947233, 0.949925, 0.952354, 0.954518, 0.956415, 0.958044, 0.959403, 0.960492, 0.961310, 0.961855, 0.962128, 0.962128, 0.961855, 0.961310, 0.960492, 0.959403, 0.958044, 0.956415, 0.954518, 0.952354, 0.949925, 0.947233, 0.944280, 0.941068, 0.937601, 0.933880, 0.929909, 0.925690, 0.921228, 0.916525, 0.911586, 0.906414, 0.901013, 0.895387, 0.889541, 0.883479, 0.877206, 0.870727, 0.864046, 0.857169, 0.850101, 0.842847, 0.835413, 0.827804, 0.820025, 0.812084, 0.803985, 0.795734, 0.787337, 0.778801, 0.770131, 0.761334, 0.752416, 0.743383, 0.734242, 0.724998, 0.715659, 0.706230, 0.696718, 0.687129, 0.677470,
	 0.680557, 0.690261, 0.699893, 0.709448, 0.718920, 0.728302, 0.737588, 0.746771, 0.755845, 0.764804, 0.773641, 0.782350, 0.790925, 0.799360, 0.807648, 0.815784, 0.823762, 0.831576, 0.839220, 0.846688, 0.853975, 0.861075, 0.867984, 0.874695, 0.881204, 0.887505, 0.893595, 0.899467, 0.905119, 0.910544, 0.915740, 0.920702, 0.925426, 0.929909, 0.934146, 0.938136, 0.941873, 0.945357, 0.948583, 0.951549, 0.954253, 0.956693, 0.958867, 0.960773, 0.962410, 0.963775, 0.964869, 0.965691, 0.966238, 0.966512, 0.966512, 0.966238, 0.965691, 0.964869, 0.963775, 0.962410, 0.960773, 0.958867, 0.956693, 0.954253, 0.951549, 0.948583, 0.945357, 0.941873, 0.938136, 0.934146, 0.929909, 0.925426, 0.920702, 0.915740, 0.910544, 0.905119, 0.899467, 0.893595, 0.887505, 0.881204, 0.874695, 0.867984, 0.861075, 0.853975, 0.846688, 0.839220, 0.831576, 0.823762, 0.815784, 0.807648, 0.799360, 0.790925, 0.782350, 0.773641, 0.764804, 0.755845, 0.746771, 0.737588, 0.728302, 0.718920, 0.709448, 0.699893, 0.690261, 0.680557,
	 0.683464, 0.693208, 0.702882, 0.712478, 0.721990, 0.731412, 0.740738, 0.749960, 0.759073, 0.768070, 0.776945, 0.785691, 0.794303, 0.802773, 0.811097, 0.819268, 0.827280, 0.835127, 0.842804, 0.850304, 0.857622, 0.864752, 0.871690, 0.878430, 0.884967, 0.891295, 0.897411, 0.903308, 0.908984, 0.914433, 0.919651, 0.924634, 0.929378, 0.933880, 0.938136, 0.942142, 0.945896, 0.949394, 0.952634, 0.955613, 0.958329, 0.960779, 0.962962, 0.964876, 0.966520, 0.967891, 0.968990, 0.969815, 0.970365, 0.970640, 0.970640, 0.970365, 0.969815, 0.968990, 0.967891, 0.966520, 0.964876, 0.962962, 0.960779, 0.958329, 0.955613, 0.952634, 0.949394, 0.945896, 0.942142, 0.938136, 0.933880, 0.929378, 0.924634, 0.919651, 0.914433, 0.908984, 0.903308, 0.897411, 0.891295, 0.884967, 0.878430, 0.871690, 0.864752, 0.857622, 0.850304, 0.842804, 0.835127, 0.827280, 0.819268, 0.811097, 0.802773, 0.794303, 0.785691, 0.776945, 0.768070, 0.759073, 0.749960, 0.740738, 0.731412, 0.721990, 0.712478, 0.702882, 0.693208, 0.683464,
	 0.686187, 0.695970, 0.705682, 0.715317, 0.724867, 0.734327, 0.743689, 0.752948, 0.762097, 0.771130, 0.780040, 0.788821, 0.797467, 0.805972, 0.814329, 0.822532, 0.830576, 0.838455, 0.846162, 0.853691, 0.861039, 0.868198, 0.875163, 0.881930, 0.888493, 0.894846, 0.900986, 0.906907, 0.912606, 0.918076, 0.923315, 0.928318, 0.933081, 0.937601, 0.941873, 0.945896, 0.949664, 0.953176, 0.956429, 0.959420, 0.962147, 0.964607, 0.966799, 0.968720, 0.970371, 0.971748, 0.972851, 0.973679, 0.974231, 0.974507, 0.974507, 0.974231, 0.973679, 0.972851, 0.971748, 0.970371, 0.968720, 0.966799, 0.964607, 0.962147, 0.959420, 0.956429, 0.953176, 0.949664, 0.945896, 0.941873, 0.937601, 0.933081, 0.928318, 0.923315, 0.918076, 0.912606, 0.906907, 0.900986, 0.894846, 0.888493, 0.881930, 0.875163, 0.868198, 0.861039, 0.853691, 0.846162, 0.838455, 0.830576, 0.822532, 0.814329, 0.805972, 0.797467, 0.788821, 0.780040, 0.771130, 0.762097, 0.752948, 0.743689, 0.734327, 0.724867, 0.715317, 0.705682, 0.695970, 0.686187,
	 0.688725, 0.698544, 0.708292, 0.717962, 0.727548, 0.737042, 0.746439, 0.755733, 0.764916, 0.773982, 0.782925, 0.791739, 0.800417, 0.808953, 0.817341, 0.825574, 0.833648, 0.841555, 0.849291, 0.856849, 0.864223, 0.871409, 0.878400, 0.885192, 0.891779, 0.898156, 0.904318, 0.910261, 0.915981, 0.921471, 0.926730, 0.931751, 0.936532, 0.941068, 0.945357, 0.949394, 0.953176, 0.956701, 0.959966, 0.962968, 0.965705, 0.968174, 0.970374, 0.972303, 0.973959, 0.975341, 0.976448, 0.977279, 0.977834, 0.978111, 0.978111, 0.977834, 0.977279, 0.976448, 0.975341, 0.973959, 0.972303, 0.970374, 0.968174, 0.965705, 0.962968, 0.959966, 0.956701, 0.953176, 0.949394, 0.945357, 0.941068, 0.936532, 0.931751, 0.926730, 0.921471, 0.915981, 0.910261, 0.904318, 0.898156, 0.891779, 0.885192, 0.878400, 0.871409, 0.864223, 0.856849, 0.849291, 0.841555, 0.833648, 0.825574, 0.817341, 0.808953, 0.800417, 0.791739, 0.782925, 0.773982, 0.764916, 0.755733, 0.746439, 0.737042, 0.727548, 0.717962, 0.708292, 0.698544, 0.688725,
	 0.691075, 0.700928, 0.710709, 0.720412, 0.730031, 0.739558, 0.748987, 0.758312, 0.767526, 0.776623, 0.785597, 0.794440, 0.803148, 0.811713, 0.820130, 0.828392, 0.836493, 0.844427, 0.852189, 0.859773, 0.867172, 0.874382, 0.881398, 0.888212, 0.894822, 0.901221, 0.907404, 0.913368, 0.919106, 0.924616, 0.929892, 0.934931, 0.939728, 0.944280, 0.948583, 0.952634, 0.956429, 0.959966, 0.963242, 0.966255, 0.969001, 0.971478, 0.973686, 0.975621, 0.977283, 0.978670, 0.979781, 0.980615, 0.981171, 0.981449, 0.981449, 0.981171, 0.980615, 0.979781, 0.978670, 0.977283, 0.975621, 0.973686, 0.971478, 0.969001, 0.966255, 0.963242, 0.959966, 0.956429, 0.952634, 0.948583, 0.944280, 0.939728, 0.934931, 0.929892, 0.924616, 0.919106, 0.913368, 0.907404, 0.901221, 0.894822, 0.888212, 0.881398, 0.874382, 0.867172, 0.859773, 0.852189, 0.844427, 0.836493, 0.828392, 0.820130, 0.811713, 0.803148, 0.794440, 0.785597, 0.776623, 0.767526, 0.758312, 0.748987, 0.739558, 0.730031, 0.720412, 0.710709, 0.700928, 0.691075,
	 0.693236, 0.703120, 0.712932, 0.722665, 0.732313, 0.741870, 0.751329, 0.760683, 0.769926, 0.779052, 0.788053, 0.796925, 0.805660, 0.814252, 0.822695, 0.830982, 0.839109, 0.847068, 0.854854, 0.862461, 0.869884, 0.877117, 0.884154, 0.890990, 0.897620, 0.904039, 0.910242, 0.916224, 0.921981, 0.927507, 0.932800, 0.937854, 0.942667, 0.947233, 0.951549, 0.955613, 0.959420, 0.962968, 0.966255, 0.969276, 0.972031, 0.974516, 0.976731, 0.978672, 0.980339, 0.981730, 0.982845, 0.983681, 0.984239, 0.984518, 0.984518, 0.984239, 0.983681, 0.982845, 0.981730, 0.980339, 0.978672, 0.976731, 0.974516, 0.972031, 0.969276, 0.966255, 0.962968, 0.959420, 0.955613, 0.951549, 0.947233, 0.942667, 0.937854, 0.932800, 0.927507, 0.921981, 0.916224, 0.910242, 0.904039, 0.897620, 0.890990, 0.884154, 0.877117, 0.869884, 0.862461, 0.854854, 0.847068, 0.839109, 0.830982, 0.822695, 0.814252, 0.805660, 0.796925, 0.788053, 0.779052, 0.769926, 0.760683, 0.751329, 0.741870, 0.732313, 0.722665, 0.712932, 0.703120, 0.693236,
	 0.695206, 0.705118, 0.714958, 0.724719, 0.734395, 0.743979, 0.753464, 0.762845, 0.772114, 0.781266, 0.790293, 0.799190, 0.807949, 0.816566, 0.825033, 0.833344, 0.841493, 0.849475, 0.857284, 0.864913, 0.872356, 0.879610, 0.886667, 0.893522, 0.900171, 0.906608, 0.912829, 0.918828, 0.924601, 0.930143, 0.935451, 0.940520, 0.945346, 0.949925, 0.954253, 0.958329, 0.962147, 0.965705, 0.969001, 0.972031, 0.974793, 0.977286, 0.979507, 0.981454, 0.983125, 0.984520, 0.985638, 0.986477, 0.987036, 0.987316, 0.987316, 0.987036, 0.986477, 0.985638, 0.984520, 0.983125, 0.981454, 0.979507, 0.977286, 0.974793, 0.972031, 0.969001, 0.965705, 0.962147, 0.958329, 0.954253, 0.949925, 0.945346, 0.940520, 0.935451, 0.930143, 0.924601, 0.918828, 0.912829, 0.906608, 0.900171, 0.893522, 0.886667, 0.879610, 0.872356, 0.864913, 0.857284, 0.849475, 0.841493, 0.833344, 0.825033, 0.816566, 0.807949, 0.799190, 0.790293, 0.781266, 0.772114, 0.762845, 0.753464, 0.743979, 0.734395, 0.724719, 0.714958, 0.705118, 0.695206,
	 0.696984, 0.706921, 0.716786, 0.726572, 0.736273, 0.745881, 0.755391, 0.764796, 0.774089, 0.783263, 0.792314, 0.801233, 0.810015, 0.818654, 0.827142, 0.835475, 0.843645, 0.851647, 0.859476, 0.867124, 0.874587, 0.881859, 0.888934, 0.895807, 0.902473, 0.908927, 0.915163, 0.921177, 0.926965, 0.932522, 0.937843, 0.942925, 0.947763, 0.952354, 0.956693, 0.960779, 0.964607, 0.968174, 0.971478, 0.974516, 0.977286, 0.979785, 0.982011, 0.983963, 0.985639, 0.987038, 0.988158, 0.988999, 0.989560, 0.989841, 0.989841, 0.989560, 0.988999, 0.988158, 0.987038, 0.985639, 0.983963, 0.982011, 0.979785, 0.977286, 0.974516, 0.971478, 0.968174, 0.964607, 0.960779, 0.956693, 0.952354, 0.947763, 0.942925, 0.937843, 0.932522, 0.926965, 0.921177, 0.915163, 0.908927, 0.902473, 0.895807, 0.888934, 0.881859, 0.874587, 0.867124, 0.859476, 0.851647, 0.843645, 0.835475, 0.827142, 0.818654, 0.810015, 0.801233, 0.792314, 0.783263, 0.774089, 0.764796, 0.755391, 0.745881, 0.736273, 0.726572, 0.716786, 0.706921, 0.696984,
	 0.698568, 0.708527, 0.718415, 0.728223, 0.737946, 0.747576, 0.757107, 0.766533, 0.775847, 0.785043, 0.794114, 0.803054, 0.811856, 0.820514, 0.829022, 0.837373, 0.845562, 0.853583, 0.861429, 0.869094, 0.876574, 0.883863, 0.890954, 0.897842, 0.904524, 0.910992, 0.917242, 0.923271, 0.929071, 0.934641, 0.939974, 0.945067, 0.949916, 0.954518, 0.958867, 0.962962, 0.966799, 0.970374, 0.973686, 0.976731, 0.979507, 0.982011, 0.984243, 0.986199, 0.987879, 0.989281, 0.990403, 0.991246, 0.991809, 0.992090, 0.992090, 0.991809, 0.991246, 0.990403, 0.989281, 0.987879, 0.986199, 0.984243, 0.982011, 0.979507, 0.976731, 0.973686, 0.970374, 0.966799, 0.962962, 0.958867, 0.954518, 0.949916, 0.945067, 0.939974, 0.934641, 0.929071, 0.923271, 0.917242, 0.910992, 0.904524, 0.897842, 0.890954, 0.883863, 0.876574, 0.869094, 0.861429, 0.853583, 0.845562, 0.837373, 0.829022, 0.820514, 0.811856, 0.803054, 0.794114, 0.785043, 0.775847, 0.766533, 0.757107, 0.747576, 0.737946, 0.728223, 0.718415, 0.708527, 0.698568,
	 0.699956, 0.709936, 0.719843, 0.729671, 0.739412, 0.749062, 0.758612, 0.768057, 0.777390, 0.786604, 0.795693, 0.804650, 0.813470, 0.822145, 0.830670, 0.839038, 0.847243, 0.855279, 0.863141, 0.870822, 0.878317, 0.885619, 0.892725, 0.899627, 0.906321, 0.912803, 0.919066, 0.925106, 0.930918, 0.936499, 0.941842, 0.946946, 0.951805, 0.956415, 0.960773, 0.964876, 0.968720, 0.972303, 0.975621, 0.978672, 0.981454, 0.983963, 0.986199, 0.988159, 0.989842, 0.991247, 0.992372, 0.993217, 0.993780, 0.994062, 0.994062, 0.993780, 0.993217, 0.992372, 0.991247, 0.989842, 0.988159, 0.986199, 0.983963, 0.981454, 0.978672, 0.975621, 0.972303, 0.968720, 0.964876, 0.960773, 0.956415, 0.951805, 0.946946, 0.941842, 0.936499, 0.930918, 0.925106, 0.919066, 0.912803, 0.906321, 0.899627, 0.892725, 0.885619, 0.878317, 0.870822, 0.863141, 0.855279, 0.847243, 0.839038, 0.830670, 0.822145, 0.813470, 0.804650, 0.795693, 0.786604, 0.777390, 0.768057, 0.758612, 0.749062, 0.739412, 0.729671, 0.719843, 0.709936, 0.699956,
	 0.701148, 0.711145, 0.721069, 0.730913, 0.740672, 0.750338, 0.759904, 0.769365, 0.778714, 0.787944, 0.797048, 0.806021, 0.814855, 0.823545, 0.832084, 0.840467, 0.848686, 0.856736, 0.864611, 0.872305, 0.879813, 0.887128, 0.894245, 0.901159, 0.907865, 0.914357, 0.920631, 0.926681, 0.932504, 0.938094, 0.943447, 0.948559, 0.953426, 0.958044, 0.962410, 0.966520, 0.970371, 0.973959, 0.977283, 0.980339, 0.983125, 0.985639, 0.987879, 0.989842, 0.991528, 0.992935, 0.994062, 0.994908, 0.995473, 0.995755, 0.995755, 0.995473, 0.994908, 0.994062, 0.992935, 0.991528, 0.989842, 0.987879, 0.985639, 0.983125, 0.980339, 0.977283, 0.973959, 0.970371, 0.966520, 0.962410, 0.958044, 0.953426, 0.948559, 0.943447, 0.938094, 0.932504, 0.926681, 0.920631, 0.914357, 0.907865, 0.901159, 0.894245, 0.887128, 0.879813, 0.872305, 0.864611, 0.856736, 0.848686, 0.840467, 0.832084, 0.823545, 0.814855, 0.806021, 0.797048, 0.787944, 0.778714, 0.769365, 0.759904, 0.750338, 0.740672, 0.730913, 0.721069, 0.711145, 0.701148,
	 0.702143, 0.712154, 0.722092, 0.731951, 0.741723, 0.751402, 0.760983, 0.770457, 0.779819, 0.789062, 0.798179, 0.807164, 0.816012, 0.824714, 0.833265, 0.841659, 0.849890, 0.857952, 0.865838, 0.873543, 0.881061, 0.888387, 0.895514, 0.902438, 0.909154, 0.915655, 0.921938, 0.927996, 0.933827, 0.939425, 0.944786, 0.949905, 0.954779, 0.959403, 0.963775, 0.967891, 0.971748, 0.975341, 0.978670, 0.981730, 0.984520, 0.987038, 0.989281, 0.991247, 0.992935, 0.994344, 0.995473, 0.996320, 0.996885, 0.997168, 0.997168, 0.996885, 0.996320, 0.995473, 0.994344, 0.992935, 0.991247, 0.989281, 0.987038, 0.984520, 0.981730, 0.978670, 0.975341, 0.971748, 0.967891, 0.963775, 0.959403, 0.954779, 0.949905, 0.944786, 0.939425, 0.933827, 0.927996, 0.921938, 0.915655, 0.909154, 0.902438, 0.895514, 0.888387, 0.881061, 0.873543, 0.865838, 0.857952, 0.849890, 0.841659, 0.833265, 0.824714, 0.816012, 0.807164, 0.798179, 0.789062, 0.779819, 0.770457, 0.760983, 0.751402, 0.741723, 0.731951, 0.722092, 0.712154, 0.702143,
	 0.702940, 0.712963, 0.722912, 0.732781, 0.742565, 0.752255, 0.761846, 0.771331, 0.780704, 0.789957, 0.799085, 0.808081, 0.816938, 0.825650, 0.834211, 0.842615, 0.850855, 0.858926, 0.866821, 0.874535, 0.882061, 0.889395, 0.896531, 0.903463, 0.910185, 0.916694, 0.922984, 0.929050, 0.934887, 0.940491, 0.945858, 0.950983, 0.955862, 0.960492, 0.964869, 0.968990, 0.972851, 0.976448, 0.979781, 0.982845, 0.985638, 0.988158, 0.990403, 0.992372, 0.994062, 0.995473, 0.996603, 0.997451, 0.998017, 0.998300, 0.998300, 0.998017, 0.997451, 0.996603, 0.995473, 0.994062, 0.992372, 0.990403, 0.988158, 0.985638, 0.982845, 0.979781, 0.976448, 0.972851, 0.968990, 0.964869, 0.960492, 0.955862, 0.950983, 0.945858, 0.940491, 0.934887, 0.929050, 0.922984, 0.916694, 0.910185, 0.903463, 0.896531, 0.889395, 0.882061, 0.874535, 0.866821, 0.858926, 0.850855, 0.842615, 0.834211, 0.825650, 0.816938, 0.808081, 0.799085, 0.789957, 0.780704, 0.771331, 0.761846, 0.752255, 0.742565, 0.732781, 0.722912, 0.712963, 0.702940,
	 0.703539, 0.713569, 0.723527, 0.733405, 0.743197, 0.752896, 0.762495, 0.771988, 0.781368, 0.790630, 0.799765, 0.808768, 0.817633, 0.826353, 0.834921, 0.843332, 0.851579, 0.859657, 0.867559, 0.875279, 0.882812, 0.890152, 0.897294, 0.904231, 0.910960, 0.917474, 0.923770, 0.929840, 0.935683, 0.941292, 0.946663, 0.951792, 0.956676, 0.961310, 0.965691, 0.969815, 0.973679, 0.977279, 0.980615, 0.983681, 0.986477, 0.988999, 0.991246, 0.993217, 0.994908, 0.996320, 0.997451, 0.998300, 0.998866, 0.999150, 0.999150, 0.998866, 0.998300, 0.997451, 0.996320, 0.994908, 0.993217, 0.991246, 0.988999, 0.986477, 0.983681, 0.980615, 0.977279, 0.973679, 0.969815, 0.965691, 0.961310, 0.956676, 0.951792, 0.946663, 0.941292, 0.935683, 0.929840, 0.923770, 0.917474, 0.910960, 0.904231, 0.897294, 0.890152, 0.882812, 0.875279, 0.867559, 0.859657, 0.851579, 0.843332, 0.834921, 0.826353, 0.817633, 0.808768, 0.799765, 0.790630, 0.781368, 0.771988, 0.762495, 0.752896, 0.743197, 0.733405, 0.723527, 0.713569, 0.703539,
	 0.703938, 0.713974, 0.723938, 0.733821, 0.743618, 0.753323, 0.762927, 0.772426, 0.781812, 0.791078, 0.800219, 0.809227, 0.818097, 0.826821, 0.835395, 0.843810, 0.852062, 0.860144, 0.868051, 0.875775, 0.883313, 0.890657, 0.897803, 0.904744, 0.911477, 0.917995, 0.924294, 0.930368, 0.936214, 0.941826, 0.947200, 0.952332, 0.957219, 0.961855, 0.966238, 0.970365, 0.974231, 0.977834, 0.981171, 0.984239, 0.987036, 0.989560, 0.991809, 0.993780, 0.995473, 0.996885, 0.998017, 0.998866, 0.999433, 0.999716, 0.999716, 0.999433, 0.998866, 0.998017, 0.996885, 0.995473, 0.993780, 0.991809, 0.989560, 0.987036, 0.984239, 0.981171, 0.977834, 0.974231, 0.970365, 0.966238, 0.961855, 0.957219, 0.952332, 0.947200, 0.941826, 0.936214, 0.930368, 0.924294, 0.917995, 0.911477, 0.904744, 0.897803, 0.890657, 0.883313, 0.875775, 0.868051, 0.860144, 0.852062, 0.843810, 0.835395, 0.826821, 0.818097, 0.809227, 0.800219, 0.791078, 0.781812, 0.772426, 0.762927, 0.753323, 0.743618, 0.733821, 0.723938, 0.713974, 0.703938,
	 0.704137, 0.714177, 0.724143, 0.734029, 0.743829, 0.753536, 0.763144, 0.772645, 0.782033, 0.791302, 0.800446, 0.809457, 0.818329, 0.827056, 0.835632, 0.844050, 0.852304, 0.860388, 0.868297, 0.876024, 0.883563, 0.890910, 0.898057, 0.905001, 0.911735, 0.918255, 0.924556, 0.930632, 0.936479, 0.942093, 0.947469, 0.952602, 0.957490, 0.962128, 0.966512, 0.970640, 0.974507, 0.978111, 0.981449, 0.984518, 0.987316, 0.989841, 0.992090, 0.994062, 0.995755, 0.997168, 0.998300, 0.999150, 0.999716, 1.000000, 1.000000, 0.999716, 0.999150, 0.998300, 0.997168, 0.995755, 0.994062, 0.992090, 0.989841, 0.987316, 0.984518, 0.981449, 0.978111, 0.974507, 0.970640, 0.966512, 0.962128, 0.957490, 0.952602, 0.947469, 0.942093, 0.936479, 0.930632, 0.924556, 0.918255, 0.911735, 0.905001, 0.898057, 0.890910, 0.883563, 0.876024, 0.868297, 0.860388, 0.852304, 0.844050, 0.835632, 0.827056, 0.818329, 0.809457, 0.800446, 0.791302, 0.782033, 0.772645, 0.763144, 0.753536, 0.743829, 0.734029, 0.724143, 0.714177, 0.704137,
	 0.704137, 0.714177, 0.724143, 0.734029, 0.743829, 0.753536, 0.763144, 0.772645, 0.782033, 0.791302, 0.800446, 0.809457, 0.818329, 0.827056, 0.835632, 0.844050, 0.852304, 0.860388, 0.868297, 0.876024, 0.883563, 0.890910, 0.898057, 0.905001, 0.911735, 0.918255, 0.924556, 0.930632, 0.936479, 0.942093, 0.947469, 0.952602, 0.957490, 0.962128, 0.966512, 0.970640, 0.974507, 0.978111, 0.981449, 0.984518, 0.987316, 0.989841, 0.992090, 0.994062, 0.995755, 0.997168, 0.998300, 0.999150, 0.999716, 1.000000, 1.000000, 0.999716, 0.999150, 0.998300, 0.997168, 0.995755, 0.994062, 0.992090, 0.989841, 0.987316, 0.984518, 0.981449, 0.978111, 0.974507, 0.970640, 0.966512, 0.962128, 0.957490, 0.952602, 0.947469, 0.942093, 0.936479, 0.930632, 0.924556, 0.918255, 0.911735, 0.905001, 0.898057, 0.890910, 0.883563, 0.876024, 0.868297, 0.860388, 0.852304, 0.844050, 0.835632, 0.827056, 0.818329, 0.809457, 0.800446, 0.791302, 0.782033, 0.772645, 0.763144, 0.753536, 0.743829, 0.734029, 0.724143, 0.714177, 0.704137,
	 0.703938, 0.713974, 0.723938, 0.733821, 0.743618, 0.753323, 0.762927, 0.772426, 0.781812, 0.791078, 0.800219, 0.809227, 0.818097, 0.826821, 0.835395, 0.843810, 0.852062, 0.860144, 0.868051, 0.875775, 0.883313, 0.890657, 0.897803, 0.904744, 0.911477, 0.917995, 0.924294, 0.930368, 0.936214, 0.941826, 0.947200, 0.952332, 0.957219, 0.961855, 0.966238, 0.970365, 0.974231, 0.977834, 0.981171, 0.984239, 0.987036, 0.989560, 0.991809, 0.993780, 0.995473, 0.996885, 0.998017, 0.998866, 0.999433, 0.999716, 0.999716, 0.999433, 0.998866, 0.998017, 0.996885, 0.995473, 0.993780, 0.991809, 0.989560, 0.987036, 0.984239, 0.981171, 0.977834, 0.974231, 0.970365, 0.966238, 0.961855, 0.957219, 0.952332, 0.947200, 0.941826, 0.936214, 0.930368, 0.924294, 0.917995, 0.911477, 0.904744, 0.897803, 0.890657, 0.883313, 0.875775, 0.868051, 0.860144, 0.852062, 0.843810, 0.835395, 0.826821, 0.818097, 0.809227, 0.800219, 0.791078, 0.781812, 0.772426, 0.762927, 0.753323, 0.743618, 0.733821, 0.723938, 0.713974, 0.703938,
	 0.703539, 0.713569, 0.723527, 0.733405, 0.743197, 0.752896, 0.762495, 0.771988, 0.781368, 0.790630, 0.799765, 0.808768, 0.817633, 0.826353, 0.834921, 0.843332, 0.851579, 0.859657, 0.867559, 0.875279, 0.882812, 0.890152, 0.897294, 0.904231, 0.910960, 0.917474, 0.923770, 0.929840, 0.935683, 0.941292, 0.946663, 0.951792, 0.956676, 0.961310, 0.965691, 0.969815, 0.973679, 0.977279, 0.980615, 0.983681, 0.986477, 0.988999, 0.991246, 0.993217, 0.994908, 0.996320, 0.997451, 0.998300, 0.998866, 0.999150, 0.999150, 0.998866, 0.998300, 0.997451, 0.996320, 0.994908, 0.993217, 0.991246, 0.988999, 0.986477, 0.983681, 0.980615, 0.977279, 0.973679, 0.969815, 0.965691, 0.961310, 0.956676, 0.951792, 0.946663, 0.941292, 0.935683, 0.929840, 0.923770, 0.917474, 0.910960, 0.904231, 0.897294, 0.890152, 0.882812, 0.875279, 0.867559, 0.859657, 0.851579, 0.843332, 0.834921, 0.826353, 0.817633, 0.808768, 0.799765, 0.790630, 0.781368, 0.771988, 0.762495, 0.752896, 0.743197, 0.733405, 0.723527, 0.713569, 0.703539,
	 0.702940, 0.712963, 0.722912, 0.732781, 0.742565, 0.752255, 0.761846, 0.771331, 0.780704, 0.789957, 0.799085, 0.808081, 0.816938, 0.825650, 0.834211, 0.842615, 0.850855, 0.858926, 0.866821, 0.874535, 0.882061, 0.889395, 0.896531, 0.903463, 0.910185, 0.916694, 0.922984, 0.929050, 0.934887, 0.940491, 0.945858, 0.950983, 0.955862, 0.960492, 0.964869, 0.968990, 0.972851, 0.976448, 0.979781, 0.982845, 0.985638, 0.988158, 0.990403, 0.992372, 0.994062, 0.995473, 0.996603, 0.997451, 0.998017, 0.998300, 0.998300, 0.998017, 0.997451, 0.996603, 0.995473, 0.994062, 0.992372, 0.990403, 0.988158, 0.985638, 0.982845, 0.979781, 0.976448, 0.972851, 0.968990, 0.964869, 0.960492, 0.955862, 0.950983, 0.945858, 0.940491, 0.934887, 0.929050, 0.922984, 0.916694, 0.910185, 0.903463, 0.896531, 0.889395, 0.882061, 0.874535, 0.866821, 0.858926, 0.850855, 0.842615, 0.834211, 0.825650, 0.816938, 0.808081, 0.799085, 0.789957, 0.780704, 0.771331, 0.761846, 0.752255, 0.742565, 0.732781, 0.722912, 0.712963, 0.702940,
	 0.702143, 0.712154, 0.722092, 0.731951, 0.741723, 0.751402, 0.760983, 0.770457, 0.779819, 0.789062, 0.798179, 0.807164, 0.816012, 0.824714, 0.833265, 0.841659, 0.849890, 0.857952, 0.865838, 0.873543, 0.881061, 0.888387, 0.895514, 0.902438, 0.909154, 0.915655, 0.921938, 0.927996, 0.933827, 0.939425, 0.944786, 0.949905, 0.954779, 0.959403, 0.963775, 0.967891, 0.971748, 0.975341, 0.978670, 0.981730, 0.984520, 0.987038, 0.989281, 0.991247, 0.992935, 0.994344, 0.995473, 0.996320, 0.996885, 0.997168, 0.997168, 0.996885, 0.996320, 0.995473, 0.994344, 0.992935, 0.991247, 0.989281, 0.987038, 0.984520, 0.981730, 0.978670, 0.975341, 0.971748, 0.967891, 0.963775, 0.959403, 0.954779, 0.949905, 0.944786, 0.939425, 0.933827, 0.927996, 0.921938, 0.915655, 0.909154, 0.902438, 0.895514, 0.888387, 0.881061, 0.873543, 0.865838, 0.857952, 0.849890, 0.841659, 0.833265, 0.824714, 0.816012, 0.807164, 0.798179, 0.789062, 0.779819, 0.770457, 0.760983, 0.751402, 0.741723, 0.731951, 0.722092, 0.712154, 0.702143,
	 0.701148, 0.711145, 0.721069, 0.730913, 0.740672, 0.750338, 0.759904, 0.769365, 0.778714, 0.787944, 0.797048, 0.806021, 0.814855, 0.823545, 0.832084, 0.840467, 0.848686, 0.856736, 0.864611, 0.872305, 0.879813, 0.887128, 0.894245, 0.901159, 0.907865, 0.914357, 0.920631, 0.926681, 0.932504, 0.938094, 0.943447, 0.948559, 0.953426, 0.958044, 0.962410, 0.966520, 0.970371, 0.973959, 0.977283, 0.980339, 0.983125, 0.985639, 0.987879, 0.989842, 0.991528, 0.992935, 0.994062, 0.994908, 0.995473, 0.995755, 0.995755, 0.995473, 0.994908, 0.994062, 0.992935, 0.991528, 0.989842, 0.987879, 0.985639, 0.983125, 0.980339, 0.977283, 0.973959, 0.970371, 0.966520, 0.962410, 0.958044, 0.953426, 0.948559, 0.943447, 0.938094, 0.932504, 0.926681, 0.920631, 0.914357, 0.907865, 0.901159, 0.894245, 0.887128, 0.879813, 0.872305, 0.864611, 0.856736, 0.848686, 0.840467, 0.832084, 0.823545, 0.814855, 0.806021, 0.797048, 0.787944, 0.778714, 0.769365, 0.759904, 0.750338, 0.740672, 0.730913, 0.721069, 0.711145, 0.701148,
	 0.699956, 0.709936, 0.719843, 0.729671, 0.739412, 0.749062, 0.758612, 0.768057, 0.777390, 0.786604, 0.795693, 0.804650, 0.813470, 0.822145, 0.830670, 0.839038, 0.847243, 0.855279, 0.863141, 0.870822, 0.878317, 0.885619, 0.892725, 0.899627, 0.906321, 0.912803, 0.919066, 0.925106, 0.930918, 0.936499, 0.941842, 0.946946, 0.951805, 0.956415, 0.960773, 0.964876, 0.968720, 0.972303, 0.975621, 0.978672, 0.981454, 0.983963, 0.986199, 0.988159, 0.989842, 0.991247, 0.992372, 0.993217, 0.993780, 0.994062, 0.994062, 0.993780, 0.993217, 0.992372, 0.991247, 0.989842, 0.988159, 0.986199, 0.983963, 0.981454, 0.978672, 0.975621, 0.972303, 0.968720, 0.964876, 0.960773, 0.956415, 0.951805, 0.946946, 0.941842, 0.936499, 0.930918, 0.925106, 0.919066, 0.912803, 0.906321, 0.899627, 0.892725, 0.885619, 0.878317, 0.870822, 0.863141, 0.855279, 0.847243, 0.839038, 0.830670, 0.822145, 0.813470, 0.804650, 0.795693, 0.786604, 0.777390, 0.768057, 0.758612, 0.749062, 0.739412, 0.729671, 0.719843, 0.709936, 0.699956,
	 0.698568, 0.708527, 0.718415, 0.728223, 0.737946, 0.747576, 0.757107, 0.766533, 0.775847, 0.785043, 0.794114, 0.803054, 0.811856, 0.820514, 0.829022, 0.837373, 0.845562, 0.853583, 0.861429, 0.869094, 0.876574, 0.883863, 0.890954, 0.897842, 0.904524, 0.910992, 0.917242, 0.923271, 0.929071, 0.934641, 0.939974, 0.945067, 0.949916, 0.954518, 0.958867, 0.962962, 0.966799, 0.970374, 0.973686, 0.976731, 0.979507, 0.982011, 0.984243, 0.986199, 0.987879, 0.989281, 0.990403, 0.991246, 0.991809, 0.992090, 0.992090, 0.991809, 0.991246, 0.990403, 0.989281, 0.987879, 0.986199, 0.984243, 0.982011, 0.979507, 0.976731, 0.973686, 0.970374, 0.966799, 0.962962, 0.958867, 0.954518, 0.949916, 0.945067, 0.939974, 0.934641, 0.929071, 0.923271, 0.917242, 0.910992, 0.904524, 0.897842, 0.890954, 0.883863, 0.876574, 0.869094, 0.861429, 0.853583, 0.845562, 0.837373, 0.829022, 0.820514, 0.811856, 0.803054, 0.794114, 0.785043, 0.775847, 0.766533, 0.757107, 0.747576, 0.737946, 0.728223, 0.718415, 0.708527, 0.698568,
	 0.696984, 0.706921, 0.716786, 0.726572, 0.736273, 0.745881, 0.755391, 0.764796, 0.774089, 0.783263, 0.792314, 0.801233, 0.810015, 0.818654, 0.827142, 0.835475, 0.843645, 0.851647, 0.859476, 0.867124, 0.874587, 0.881859, 0.888934, 0.895807, 0.902473, 0.908927, 0.915163, 0.921177, 0.926965, 0.932522, 0.937843, 0.942925, 0.947763, 0.952354, 0.956693, 0.960779, 0.964607, 0.968174, 0.971478, 0.974516, 0.977286, 0.979785, 0.982011, 0.983963, 0.985639, 0.987038, 0.988158, 0.988999, 0.989560, 0.989841, 0.989841, 0.989560, 0.988999, 0.988158, 0.987038, 0.985639, 0.983963, 0.982011, 0.979785, 0.977286, 0.974516, 0.971478, 0.968174, 0.964607, 0.960779, 0.956693, 0.952354, 0.947763, 0.942925, 0.937843, 0.932522, 0.926965, 0.921177, 0.915163, 0.908927, 0.902473, 0.895807, 0.888934, 0.881859, 0.874587, 0.867124, 0.859476, 0.851647, 0.843645, 0.835475, 0.827142, 0.818654, 0.810015, 0.801233, 0.792314, 0.783263, 0.774089, 0.764796, 0.755391, 0.745881, 0.736273, 0.726572, 0.716786, 0.706921, 0.696984,
	 0.695206, 0.705118, 0.714958, 0.724719, 0.734395, 0.743979, 0.753464, 0.762845, 0.772114, 0.781266, 0.790293, 0.799190, 0.807949, 0.816566, 0.825033, 0.833344, 0.841493, 0.849475, 0.857284, 0.864913, 0.872356, 0.879610, 0.886667, 0.893522, 0.900171, 0.906608, 0.912829, 0.918828, 0.924601, 0.930143, 0.935451, 0.940520, 0.945346, 0.949925, 0.954253, 0.958329, 0.962147, 0.965705, 0.969001, 0.972031, 0.974793, 0.977286, 0.979507, 0.981454, 0.983125, 0.984520, 0.985638, 0.986477, 0.987036, 0.987316, 0.987316, 0.987036, 0.986477, 0.985638, 0.984520, 0.983125, 0.981454, 0.979507, 0.977286, 0.974793, 0.972031, 0.969001, 0.965705, 0.962147, 0.958329, 0.954253, 0.949925, 0.945346, 0.940520, 0.935451, 0.930143, 0.924601, 0.918828, 0.912829, 0.906608, 0.900171, 0.893522, 0.886667, 0.879610, 0.872356, 0.864913, 0.857284, 0.849475, 0.841493, 0.833344, 0.825033, 0.816566, 0.807949, 0.799190, 0.790293, 0.781266, 0.772114, 0.762845, 0.753464, 0.743979, 0.734395, 0.724719, 0.714958, 0.705118, 0.695206,
	 0.693236, 0.703120, 0.712932, 0.722665, 0.732313, 0.741870, 0.751329, 0.760683, 0.769926, 0.779052, 0.788053, 0.796925, 0.805660, 0.814252, 0.822695, 0.830982, 0.839109, 0.847068, 0.854854, 0.862461, 0.869884, 0.877117, 0.884154, 0.890990, 0.897620, 0.904039, 0.910242, 0.916224, 0.921981, 0.927507, 0.932800, 0.937854, 0.942667, 0.947233, 0.951549, 0.955613, 0.959420, 0.962968, 0.966255, 0.969276, 0.972031, 0.974516, 0.976731, 0.978672, 0.980339, 0.981730, 0.982845, 0.983681, 0.984239, 0.984518, 0.984518, 0.984239, 0.983681, 0.982845, 0.981730, 0.980339, 0.978672, 0.976731, 0.974516, 0.972031, 0.969276, 0.966255, 0.962968, 0.959420, 0.955613, 0.951549, 0.947233, 0.942667, 0.937854, 0.932800, 0.927507, 0.921981, 0.916224, 0.910242, 0.904039, 0.897620, 0.890990, 0.884154, 0.877117, 0.869884, 0.862461, 0.854854, 0.847068, 0.839109, 0.830982, 0.822695, 0.814252, 0.805660, 0.796925, 0.788053, 0.779052, 0.769926, 0.760683, 0.751329, 0.741870, 0.732313, 0.722665, 0.712932, 0.703120, 0.693236,
	 0.691075, 0.700928, 0.710709, 0.720412, 0.730031, 0.739558, 0.748987, 0.758312, 0.767526, 0.776623, 0.785597, 0.794440, 0.803148, 0.811713, 0.820130, 0.828392, 0.836493, 0.844427, 0.852189, 0.859773, 0.867172, 0.874382, 0.881398, 0.888212, 0.894822, 0.901221, 0.907404, 0.913368, 0.919106, 0.924616, 0.929892, 0.934931, 0.939728, 0.944280, 0.948583, 0.952634, 0.956429, 0.959966, 0.963242, 0.966255, 0.969001, 0.971478, 0.973686, 0.975621, 0.977283, 0.978670, 0.979781, 0.980615, 0.981171, 0.981449, 0.981449, 0.981171, 0.980615, 0.979781, 0.978670, 0.977283, 0.975621, 0.973686, 0.971478, 0.969001, 0.966255, 0.963242, 0.959966, 0.956429, 0.952634, 0.948583, 0.944280, 0.939728, 0.934931, 0.929892, 0.924616, 0.919106, 0.913368, 0.907404, 0.901221, 0.894822, 0.888212, 0.881398, 0.874382, 0.867172, 0.859773, 0.852189, 0.844427, 0.836493, 0.828392, 0.820130, 0.811713, 0.803148, 0.794440, 0.785597, 0.776623, 0.767526, 0.758312, 0.748987, 0.739558, 0.730031, 0.720412, 0.710709, 0.700928, 0.691075,
	 0.688725, 0.698544, 0.708292, 0.717962, 0.727548, 0.737042, 0.746439, 0.755733, 0.764916, 0.773982, 0.782925, 0.791739, 0.800417, 0.808953, 0.817341, 0.825574, 0.833648, 0.841555, 0.849291, 0.856849, 0.864223, 0.871409, 0.878400, 0.885192, 0.891779, 0.898156, 0.904318, 0.910261, 0.915981, 0.921471, 0.926730, 0.931751, 0.936532, 0.941068, 0.945357, 0.949394, 0.953176, 0.956701, 0.959966, 0.962968, 0.965705, 0.968174, 0.970374, 0.972303, 0.973959, 0.975341, 0.976448, 0.977279, 0.977834, 0.978111, 0.978111, 0.977834, 0.977279, 0.976448, 0.975341, 0.973959, 0.972303, 0.970374, 0.968174, 0.965705, 0.962968, 0.959966, 0.956701, 0.953176, 0.949394, 0.945357, 0.941068, 0.936532, 0.931751, 0.926730, 0.921471, 0.915981, 0.910261, 0.904318, 0.898156, 0.891779, 0.885192, 0.878400, 0.871409, 0.864223, 0.856849, 0.849291, 0.841555, 0.833648, 0.825574, 0.817341, 0.808953, 0.800417, 0.791739, 0.782925, 0.773982, 0.764916, 0.755733, 0.746439, 0.737042, 0.727548, 0.717962, 0.708292, 0.698544, 0.688725,
	 0.686187, 0.695970, 0.705682, 0.715317, 0.724867, 0.734327, 0.743689, 0.752948, 0.762097, 0.771130, 0.780040, 0.788821, 0.797467, 0.805972, 0.814329, 0.822532, 0.830576, 0.838455, 0.846162, 0.853691, 0.861039, 0.868198, 0.875163, 0.881930, 0.888493, 0.894846, 0.900986, 0.906907, 0.912606, 0.918076, 0.923315, 0.928318, 0.933081, 0.937601, 0.941873, 0.945896, 0.949664, 0.953176, 0.956429, 0.959420, 0.962147, 0.964607, 0.966799, 0.968720, 0.970371, 0.971748, 0.972851, 0.973679, 0.974231, 0.974507, 0.974507, 0.974231, 0.973679, 0.972851, 0.971748, 0.970371, 0.968720, 0.966799, 0.964607, 0.962147, 0.959420, 0.956429, 0.953176, 0.949664, 0.945896, 0.941873, 0.937601, 0.933081, 0.928318, 0.923315, 0.918076, 0.912606, 0.906907, 0.900986, 0.894846, 0.888493, 0.881930, 0.875163, 0.868198, 0.861039, 0.853691, 0.846162, 0.838455, 0.830576, 0.822532, 0.814329, 0.805972, 0.797467, 0.788821, 0.780040, 0.771130, 0.762097, 0.752948, 0.743689, 0.734327, 0.724867, 0.715317, 0.705682, 0.695970, 0.686187,
	 0.683464, 0.693208, 0.702882, 0.712478, 0.721990, 0.731412, 0.740738, 0.749960, 0.759073, 0.768070, 0.776945, 0.785691, 0.794303, 0.802773, 0.811097, 0.819268, 0.827280, 0.835127, 0.842804, 0.850304, 0.857622, 0.864752, 0.871690, 0.878430, 0.884967, 0.891295, 0.897411, 0.903308, 0.908984, 0.914433, 0.919651, 0.924634, 0.929378, 0.933880, 0.938136, 0.942142, 0.945896, 0.949394, 0.952634, 0.955613, 0.958329, 0.960779, 0.962962, 0.964876, 0.966520, 0.967891, 0.968990, 0.969815, 0.970365, 0.970640, 0.970640, 0.970365, 0.969815, 0.968990, 0.967891, 0.966520, 0.964876, 0.962962, 0.960779, 0.958329, 0.955613, 0.952634, 0.949394, 0.945896, 0.942142, 0.938136, 0.933880, 0.929378, 0.924634, 0.919651, 0.914433, 0.908984, 0.903308, 0.897411, 0.891295, 0.884967, 0.878430, 0.871690, 0.864752, 0.857622, 0.850304, 0.842804, 0.835127, 0.827280, 0.819268, 0.811097, 0.802773, 0.794303, 0.785691, 0.776945, 0.768070, 0.759073, 0.749960, 0.740738, 0.731412, 0.721990, 0.712478, 0.702882, 0.693208, 0.683464,
	 0.680557, 0.690261, 0.699893, 0.709448, 0.718920, 0.728302, 0.737588, 0.746771, 0.755845, 0.764804, 0.773641, 0.782350, 0.790925, 0.799360, 0.807648, 0.815784, 0.823762, 0.831576, 0.839220, 0.846688, 0.853975, 0.861075, 0.867984, 0.874695, 0.881204, 0.887505, 0.893595, 0.899467, 0.905119, 0.910544, 0.915740, 0.920702, 0.925426, 0.929909, 0.934146, 0.938136, 0.941873, 0.945357, 0.948583, 0.951549, 0.954253, 0.956693, 0.958867, 0.960773, 0.962410, 0.963775, 0.964869, 0.965691, 0.966238, 0.966512, 0.966512, 0.966238, 0.965691, 0.964869, 0.963775, 0.962410, 0.960773, 0.958867, 0.956693, 0.954253, 0.951549, 0.948583, 0.945357, 0.941873, 0.938136, 0.934146, 0.929909, 0.925426, 0.920702, 0.915740, 0.910544, 0.905119, 0.899467, 0.893595, 0.887505, 0.881204, 0.874695, 0.867984, 0.861075, 0.853975, 0.846688, 0.839220, 0.831576, 0.823762, 0.815784, 0.807648, 0.799360, 0.790925, 0.782350, 0.773641, 0.764804, 0.755845, 0.746771, 0.737588, 0.728302, 0.718920, 0.709448, 0.699893, 0.690261, 0.680557,
	 0.677470, 0.687129, 0.696718, 0.706230, 0.715659, 0.724998, 0.734242, 0.743383, 0.752416, 0.761334, 0.770131, 0.778801, 0.787337, 0.795734, 0.803985, 0.812084, 0.820025, 0.827804, 0.835413, 0.842847, 0.850101, 0.857169, 0.864046, 0.870727, 0.877206, 0.883479, 0.889541, 0.895387, 0.901013, 0.906414, 0.911586, 0.916525, 0.921228, 0.925690, 0.929909, 0.933880, 0.937601, 0.941068, 0.944280, 0.947233, 0.949925, 0.952354, 0.954518, 0.956415, 0.958044, 0.959403, 0.960492, 0.961310, 0.961855, 0.962128, 0.962128, 0.961855, 0.961310, 0.960492, 0.959403, 0.958044, 0.956415, 0.954518, 0.952354, 0.949925, 0.947233, 0.944280, 0.941068, 0.937601, 0.933880, 0.929909, 0.925690, 0.921228, 0.916525, 0.911586, 0.906414, 0.901013, 0.895387, 0.889541, 0.883479, 0.877206, 0.870727, 0.864046, 0.857169, 0.850101, 0.842847, 0.835413, 0.827804, 0.820025, 0.812084, 0.803985, 0.795734, 0.787337, 0.778801, 0.770131, 0.761334, 0.752416, 0.743383, 0.734242, 0.724998, 0.715659, 0.706230, 0.696718, 0.687129, 0.677470,
	 0.674205, 0.683817, 0.693360, 0.702826, 0.712209, 0.721504, 0.730703, 0.739800, 0.748789, 0.757664, 0.766419, 0.775047, 0.783542, 0.791898, 0.800109, 0.808169, 0.816073, 0.823813, 0.831386, 0.838784, 0.846003, 0.853037, 0.859881, 0.866530, 0.872978, 0.879220, 0.885253, 0.891071, 0.896669, 0.902044, 0.907192, 0.912107, 0.916787, 0.921228, 0.925426, 0.929378, 0.933081, 0.936532, 0.939728, 0.942667, 0.945346, 0.947763, 0.949916, 0.951805, 0.953426, 0.954779, 0.955862, 0.956676, 0.957219, 0.957490, 0.957490, 0.957219, 0.956676, 0.955862, 0.954779, 0.953426, 0.951805, 0.949916, 0.947763, 0.945346, 0.942667, 0.939728, 0.936532, 0.933081, 0.929378, 0.925426, 0.921228, 0.916787, 0.912107, 0.907192, 0.902044, 0.896669, 0.891071, 0.885253, 0.879220, 0.872978, 0.866530, 0.859881, 0.853037, 0.846003, 0.838784, 0.831386, 0.823813, 0.816073, 0.808169, 0.800109, 0.791898, 0.783542, 0.775047, 0.766419, 0.757664, 0.748789, 0.739800, 0.730703, 0.721504, 0.712209, 0.702826, 0.693360, 0.683817, 0.674205,
	 0.670763, 0.680326, 0.689820, 0.699238, 0.708574, 0.717820, 0.726973, 0.736023, 0.744967, 0.753797, 0.762506, 0.771090, 0.779542, 0.787855, 0.796025, 0.804044, 0.811907, 0.819608, 0.827142, 0.834502, 0.841684, 0.848683, 0.855492, 0.862106, 0.868521, 0.874732, 0.880734, 0.886522, 0.892092, 0.897440, 0.902561, 0.907451, 0.912107, 0.916525, 0.920702, 0.924634, 0.928318, 0.931751, 0.934931, 0.937854, 0.940520, 0.942925, 0.945067, 0.946946, 0.948559, 0.949905, 0.950983, 0.951792, 0.952332, 0.952602, 0.952602, 0.952332, 0.951792, 0.950983, 0.949905, 0.948559, 0.946946, 0.945067, 0.942925, 0.940520, 0.937854, 0.934931, 0.931751, 0.928318, 0.924634, 0.920702, 0.916525, 0.912107, 0.907451, 0.902561, 0.897440, 0.892092, 0.886522, 0.880734, 0.874732, 0.868521, 0.862106, 0.855492, 0.848683, 0.841684, 0.834502, 0.827142, 0.819608, 0.811907, 0.804044, 0.796025, 0.787855, 0.779542, 0.771090, 0.762506, 0.753797, 0.744967, 0.736023, 0.726973, 0.717820, 0.708574, 0.699238, 0.689820, 0.680326, 0.670763,
	 0.667148, 0.676660, 0.686103, 0.695470, 0.704755, 0.713952, 0.723055, 0.732057, 0.740952, 0.749734, 0.758397, 0.766935, 0.775341, 0.783609, 0.791735, 0.799710, 0.807531, 0.815191, 0.822684, 0.830005, 0.837148, 0.844109, 0.850881, 0.857460, 0.863841, 0.870018, 0.875987, 0.881744, 0.887284, 0.892603, 0.897697, 0.902561, 0.907192, 0.911586, 0.915740, 0.919651, 0.923315, 0.926730, 0.929892, 0.932800, 0.935451, 0.937843, 0.939974, 0.941842, 0.943447, 0.944786, 0.945858, 0.946663, 0.947200, 0.947469, 0.947469, 0.947200, 0.946663, 0.945858, 0.944786, 0.943447, 0.941842, 0.939974, 0.937843, 0.935451, 0.932800, 0.929892, 0.926730, 0.923315, 0.919651, 0.915740, 0.911586, 0.907192, 0.902561, 0.897697, 0.892603, 0.887284, 0.881744, 0.875987, 0.870018, 0.863841, 0.857460, 0.850881, 0.844109, 0.837148, 0.830005, 0.822684, 0.815191, 0.807531, 0.799710, 0.791735, 0.783609, 0.775341, 0.766935, 0.758397, 0.749734, 0.740952, 0.732057, 0.723055, 0.713952, 0.704755, 0.695470, 0.686103, 0.676660, 0.667148,
	 0.663363, 0.672821, 0.682210, 0.691524, 0.700756, 0.709901, 0.718952, 0.727903, 0.736748, 0.745480, 0.754094, 0.762583, 0.770942, 0.779163, 0.787242, 0.795173, 0.802949, 0.810566, 0.818016, 0.825296, 0.832399, 0.839319, 0.846053, 0.852595, 0.858939, 0.865082, 0.871017, 0.876741, 0.882250, 0.887539, 0.892603, 0.897440, 0.902044, 0.906414, 0.910544, 0.914433, 0.918076, 0.921471, 0.924616, 0.927507, 0.930143, 0.932522, 0.934641, 0.936499, 0.938094, 0.939425, 0.940491, 0.941292, 0.941826, 0.942093, 0.942093, 0.941826, 0.941292, 0.940491, 0.939425, 0.938094, 0.936499, 0.934641, 0.932522, 0.930143, 0.927507, 0.924616, 0.921471, 0.918076, 0.914433, 0.910544, 0.906414, 0.902044, 0.897440, 0.892603, 0.887539, 0.882250, 0.876741, 0.871017, 0.865082, 0.858939, 0.852595, 0.846053, 0.839319, 0.832399, 0.825296, 0.818016, 0.810566, 0.802949, 0.795173, 0.787242, 0.779163, 0.770942, 0.762583, 0.754094, 0.745480, 0.736748, 0.727903, 0.718952, 0.709901, 0.700756, 0.691524, 0.682210, 0.672821, 0.663363,
	 0.659410, 0.668811, 0.678145, 0.687403, 0.696581, 0.705671, 0.714668, 0.723566, 0.732358, 0.741038, 0.749601, 0.758039, 0.766348, 0.774521, 0.782551, 0.790435, 0.798165, 0.805736, 0.813142, 0.820378, 0.827438, 0.834318, 0.841012, 0.847514, 0.853821, 0.859927, 0.865827, 0.871517, 0.876993, 0.882250, 0.887284, 0.892092, 0.896669, 0.901013, 0.905119, 0.908984, 0.912606, 0.915981, 0.919106, 0.921981, 0.924601, 0.926965, 0.929071, 0.930918, 0.932504, 0.933827, 0.934887, 0.935683, 0.936214, 0.936479, 0.936479, 0.936214, 0.935683, 0.934887, 0.933827, 0.932504, 0.930918, 0.929071, 0.926965, 0.924601, 0.921981, 0.919106, 0.915981, 0.912606, 0.908984, 0.905119, 0.901013, 0.896669, 0.892092, 0.887284, 0.882250, 0.876993, 0.871517, 0.865827, 0.859927, 0.853821, 0.847514, 0.841012, 0.834318, 0.827438, 0.820378, 0.813142, 0.805736, 0.798165, 0.790435, 0.782551, 0.774521, 0.766348, 0.758039, 0.749601, 0.741038, 0.732358, 0.723566, 0.714668, 0.705671, 0.696581, 0.687403, 0.678145, 0.668811, 0.659410,
	 0.655293, 0.664636, 0.673910, 0.683111, 0.692231, 0.701265, 0.710206, 0.719048, 0.727785, 0.736411, 0.744920, 0.753306, 0.761563, 0.769685, 0.777665, 0.785499, 0.793181, 0.800705, 0.808065, 0.815256, 0.822272, 0.829109, 0.835761, 0.842223, 0.848490, 0.854558, 0.860421, 0.866076, 0.871517, 0.876741, 0.881744, 0.886522, 0.891071, 0.895387, 0.899467, 0.903308, 0.906907, 0.910261, 0.913368, 0.916224, 0.918828, 0.921177, 0.923271, 0.925106, 0.926681, 0.927996, 0.929050, 0.929840, 0.930368, 0.930632, 0.930632, 0.930368, 0.929840, 0.929050, 0.927996, 0.926681, 0.925106, 0.923271, 0.921177, 0.918828, 0.916224, 0.913368, 0.910261, 0.906907, 0.903308, 0.899467, 0.895387, 0.891071, 0.886522, 0.881744, 0.876741, 0.871517, 0.866076, 0.860421, 0.854558, 0.848490, 0.842223, 0.835761, 0.829109, 0.822272, 0.815256, 0.808065, 0.800705, 0.793181, 0.785499, 0.777665, 0.769685, 0.761563, 0.753306, 0.744920, 0.736411, 0.727785, 0.719048, 0.710206, 0.701265, 0.692231, 0.683111, 0.673910, 0.664636, 0.655293,
	 0.651014, 0.660296, 0.669510, 0.678651, 0.687712, 0.696686, 0.705569, 0.714353, 0.723033, 0.731603, 0.740057, 0.748388, 0.756591, 0.764659, 0.772588, 0.780371, 0.788002, 0.795477, 0.802789, 0.809933, 0.816903, 0.823696, 0.830304, 0.836724, 0.842950, 0.848978, 0.854803, 0.860421, 0.865827, 0.871017, 0.875987, 0.880734, 0.885253, 0.889541, 0.893595, 0.897411, 0.900986, 0.904318, 0.907404, 0.910242, 0.912829, 0.915163, 0.917242, 0.919066, 0.920631, 0.921938, 0.922984, 0.923770, 0.924294, 0.924556, 0.924556, 0.924294, 0.923770, 0.922984, 0.921938, 0.920631, 0.919066, 0.917242, 0.915163, 0.912829, 0.910242, 0.907404, 0.904318, 0.900986, 0.897411, 0.893595, 0.889541, 0.885253, 0.880734, 0.875987, 0.871017, 0.865827, 0.860421, 0.854803, 0.848978, 0.842950, 0.836724, 0.830304, 0.823696, 0.816903, 0.809933, 0.802789, 0.795477, 0.788002, 0.780371, 0.772588, 0.764659, 0.756591, 0.748388, 0.740057, 0.731603, 0.723033, 0.714353, 0.705569, 0.696686, 0.687712, 0.678651, 0.669510, 0.660296, 0.651014,
	 0.646578, 0.655796, 0.664948, 0.674026, 0.683025, 0.691939, 0.700761, 0.709485, 0.718106, 0.726618, 0.735013, 0.743288, 0.751435, 0.759448, 0.767323, 0.775053, 0.782633, 0.790056, 0.797318, 0.804413, 0.811337, 0.818082, 0.824646, 0.831022, 0.837206, 0.843193, 0.848978, 0.854558, 0.859927, 0.865082, 0.870018, 0.874732, 0.879220, 0.883479, 0.887505, 0.891295, 0.894846, 0.898156, 0.901221, 0.904039, 0.906608, 0.908927, 0.910992, 0.912803, 0.914357, 0.915655, 0.916694, 0.917474, 0.917995, 0.918255, 0.918255, 0.917995, 0.917474, 0.916694, 0.915655, 0.914357, 0.912803, 0.910992, 0.908927, 0.906608, 0.904039, 0.901221, 0.898156, 0.894846, 0.891295, 0.887505, 0.883479, 0.879220, 0.874732, 0.870018, 0.865082, 0.859927, 0.854558, 0.848978, 0.843193, 0.837206, 0.831022, 0.824646, 0.818082, 0.811337, 0.804413, 0.797318, 0.790056, 0.782633, 0.775053, 0.767323, 0.759448, 0.751435, 0.743288, 0.735013, 0.726618, 0.718106, 0.709485, 0.700761, 0.691939, 0.683025, 0.674026, 0.664948, 0.655796, 0.646578,
	 0.641987, 0.651140, 0.660227, 0.669240, 0.678175, 0.687026, 0.695785, 0.704448, 0.713007, 0.721458, 0.729795, 0.738010, 0.746099, 0.754056, 0.761875, 0.769550, 0.777076, 0.784446, 0.791657, 0.798702, 0.805576, 0.812274, 0.818791, 0.825121, 0.831261, 0.837206, 0.842950, 0.848490, 0.853821, 0.858939, 0.863841, 0.868521, 0.872978, 0.877206, 0.881204, 0.884967, 0.888493, 0.891779, 0.894822, 0.897620, 0.900171, 0.902473, 0.904524, 0.906321, 0.907865, 0.909154, 0.910185, 0.910960, 0.911477, 0.911735, 0.911735, 0.911477, 0.910960, 0.910185, 0.909154, 0.907865, 0.906321, 0.904524, 0.902473, 0.900171, 0.897620, 0.894822, 0.891779, 0.888493, 0.884967, 0.881204, 0.877206, 0.872978, 0.868521, 0.863841, 0.858939, 0.853821, 0.848490, 0.842950, 0.837206, 0.831261, 0.825121, 0.818791, 0.812274, 0.805576, 0.798702, 0.791657, 0.784446, 0.777076, 0.769550, 0.761875, 0.754056, 0.746099, 0.738010, 0.729795, 0.721458, 0.713007, 0.704448, 0.695785, 0.687026, 0.678175, 0.669240, 0.660227, 0.651140, 0.641987,
	 0.637245, 0.646331, 0.655350, 0.664297, 0.673166, 0.681951, 0.690646, 0.699244, 0.707741, 0.716130, 0.724404, 0.732559, 0.740588, 0.748486, 0.756247, 0.763866, 0.771336, 0.778652, 0.785810, 0.792802, 0.799626, 0.806274, 0.812743, 0.819027, 0.825121, 0.831022, 0.836724, 0.842223, 0.847514, 0.852595, 0.857460, 0.862106, 0.866530, 0.870727, 0.874695, 0.878430, 0.881930, 0.885192, 0.888212, 0.890990, 0.893522, 0.895807, 0.897842, 0.899627, 0.901159, 0.902438, 0.903463, 0.904231, 0.904744, 0.905001, 0.905001, 0.904744, 0.904231, 0.903463, 0.902438, 0.901159, 0.899627, 0.897842, 0.895807, 0.893522, 0.890990, 0.888212, 0.885192, 0.881930, 0.878430, 0.874695, 0.870727, 0.866530, 0.862106, 0.857460, 0.852595, 0.847514, 0.842223, 0.836724, 0.831022, 0.825121, 0.819027, 0.812743, 0.806274, 0.799626, 0.792802, 0.785810, 0.778652, 0.771336, 0.763866, 0.756247, 0.748486, 0.740588, 0.732559, 0.724404, 0.716130, 0.707741, 0.699244, 0.690646, 0.681951, 0.673166, 0.664297, 0.655350, 0.646331, 0.637245,
	 0.632356, 0.641372, 0.650322, 0.659200, 0.668001, 0.676719, 0.685347, 0.693879, 0.702311, 0.710635, 0.718846, 0.726938, 0.734906, 0.742744, 0.750445, 0.758005, 0.765418, 0.772678, 0.779780, 0.786720, 0.793490, 0.800088, 0.806507, 0.812743, 0.818791, 0.824646, 0.830304, 0.835761, 0.841012, 0.846053, 0.850881, 0.855492, 0.859881, 0.864046, 0.867984, 0.871690, 0.875163, 0.878400, 0.881398, 0.884154, 0.886667, 0.888934, 0.890954, 0.892725, 0.894245, 0.895514, 0.896531, 0.897294, 0.897803, 0.898057, 0.898057, 0.897803, 0.897294, 0.896531, 0.895514, 0.894245, 0.892725, 0.890954, 0.888934, 0.886667, 0.884154, 0.881398, 0.878400, 0.875163, 0.871690, 0.867984, 0.864046, 0.859881, 0.855492, 0.850881, 0.846053, 0.841012, 0.835761, 0.830304, 0.824646, 0.818791, 0.812743, 0.806507, 0.800088, 0.793490, 0.786720, 0.779780, 0.772678, 0.765418, 0.758005, 0.750445, 0.742744, 0.734906, 0.726938, 0.718846, 0.710635, 0.702311, 0.693879, 0.685347, 0.676719, 0.668001, 0.659200, 0.650322, 0.641372, 0.632356,
	 0.627323, 0.636267, 0.645146, 0.653954, 0.662685, 0.671333, 0.679892, 0.688357, 0.696721, 0.704979, 0.713125, 0.721153, 0.729057, 0.736832, 0.744472, 0.751972, 0.759326, 0.766528, 0.773574, 0.780458, 0.787175, 0.793720, 0.800088, 0.806274, 0.812274, 0.818082, 0.823696, 0.829109, 0.834318, 0.839319, 0.844109, 0.848683, 0.853037, 0.857169, 0.861075, 0.864752, 0.868198, 0.871409, 0.874382, 0.877117, 0.879610, 0.881859, 0.883863, 0.885619, 0.887128, 0.888387, 0.889395, 0.890152, 0.890657, 0.890910, 0.890910, 0.890657, 0.890152, 0.889395, 0.888387, 0.887128, 0.885619, 0.883863, 0.881859, 0.879610, 0.877117, 0.874382, 0.871409, 0.868198, 0.864752, 0.861075, 0.857169, 0.853037, 0.848683, 0.844109, 0.839319, 0.834318, 0.829109, 0.823696, 0.818082, 0.812274, 0.806274, 0.800088, 0.793720, 0.787175, 0.780458, 0.773574, 0.766528, 0.759326, 0.751972, 0.744472, 0.736832, 0.729057, 0.721153, 0.713125, 0.704979, 0.696721, 0.688357, 0.679892, 0.671333, 0.662685, 0.653954, 0.645146, 0.636267, 0.627323,
	 0.622150, 0.631020, 0.639826, 0.648561, 0.657220, 0.665797, 0.674286, 0.682681, 0.690976, 0.699166, 0.707244, 0.715206, 0.723045, 0.730756, 0.738333, 0.745771, 0.753064, 0.760208, 0.767195, 0.774022, 0.780684, 0.787175, 0.793490, 0.799626, 0.805576, 0.811337, 0.816903, 0.822272, 0.827438, 0.832399, 0.837148, 0.841684, 0.846003, 0.850101, 0.853975, 0.857622, 0.861039, 0.864223, 0.867172, 0.869884, 0.872356, 0.874587, 0.876574, 0.878317, 0.879813, 0.881061, 0.882061, 0.882812, 0.883313, 0.883563, 0.883563, 0.883313, 0.882812, 0.882061, 0.881061, 0.879813, 0.878317, 0.876574, 0.874587, 0.872356, 0.869884, 0.867172, 0.864223, 0.861039, 0.857622, 0.853975, 0.850101, 0.846003, 0.841684, 0.837148, 0.832399, 0.827438, 0.822272, 0.816903, 0.811337, 0.805576, 0.799626, 0.793490, 0.787175, 0.780684, 0.774022, 0.767195, 0.760208, 0.753064, 0.745771, 0.738333, 0.730756, 0.723045, 0.715206, 0.707244, 0.699166, 0.690976, 0.682681, 0.674286, 0.665797, 0.657220, 0.648561, 0.639826, 0.631020, 0.622150,
	 0.616841, 0.625636, 0.634366, 0.643027, 0.651612, 0.660116, 0.668532, 0.676855, 0.685080, 0.693200, 0.701210, 0.709103, 0.716876, 0.724521, 0.732033, 0.739408, 0.746639, 0.753721, 0.760649, 0.767418, 0.774022, 0.780458, 0.786720, 0.792802, 0.798702, 0.804413, 0.809933, 0.815256, 0.820378, 0.825296, 0.830005, 0.834502, 0.838784, 0.842847, 0.846688, 0.850304, 0.853691, 0.856849, 0.859773, 0.862461, 0.864913, 0.867124, 0.869094, 0.870822, 0.872305, 0.873543, 0.874535, 0.875279, 0.875775, 0.876024, 0.876024, 0.875775, 0.875279, 0.874535, 0.873543, 0.872305, 0.870822, 0.869094, 0.867124, 0.864913, 0.862461, 0.859773, 0.856849, 0.853691, 0.850304, 0.846688, 0.842847, 0.838784, 0.834502, 0.830005, 0.825296, 0.820378, 0.815256, 0.809933, 0.804413, 0.798702, 0.792802, 0.786720, 0.780458, 0.774022, 0.767418, 0.760649, 0.753721, 0.746639, 0.739408, 0.732033, 0.724521, 0.716876, 0.709103, 0.701210, 0.693200, 0.685080, 0.676855, 0.668532, 0.660116, 0.651612, 0.643027, 0.634366, 0.625636, 0.616841,
	 0.611400, 0.620117, 0.628771, 0.637355, 0.645865, 0.654293, 0.662635, 0.670885, 0.679037, 0.687086, 0.695025, 0.702849, 0.710552, 0.718130, 0.725576, 0.732886, 0.740053, 0.747073, 0.753940, 0.760649, 0.767195, 0.773574, 0.779780, 0.785810, 0.791657, 0.797318, 0.802789, 0.808065, 0.813142, 0.818016, 0.822684, 0.827142, 0.831386, 0.835413, 0.839220, 0.842804, 0.846162, 0.849291, 0.852189, 0.854854, 0.857284, 0.859476, 0.861429, 0.863141, 0.864611, 0.865838, 0.866821, 0.867559, 0.868051, 0.868297, 0.868297, 0.868051, 0.867559, 0.866821, 0.865838, 0.864611, 0.863141, 0.861429, 0.859476, 0.857284, 0.854854, 0.852189, 0.849291, 0.846162, 0.842804, 0.839220, 0.835413, 0.831386, 0.827142, 0.822684, 0.818016, 0.813142, 0.808065, 0.802789, 0.797318, 0.791657, 0.785810, 0.779780, 0.773574, 0.767195, 0.760649, 0.753940, 0.747073, 0.740053, 0.732886, 0.725576, 0.718130, 0.710552, 0.702849, 0.695025, 0.687086, 0.679037, 0.670885, 0.662635, 0.654293, 0.645865, 0.637355, 0.628771, 0.620117, 0.611400,
	 0.605832, 0.614469, 0.623044, 0.631550, 0.639982, 0.648334, 0.656600, 0.664775, 0.672852, 0.680827, 0.688694, 0.696447, 0.704081, 0.711589, 0.718968, 0.726210, 0.733312, 0.740268, 0.747073, 0.753721, 0.760208, 0.766528, 0.772678, 0.778652, 0.784446, 0.790056, 0.795477, 0.800705, 0.805736, 0.810566, 0.815191, 0.819608, 0.823813, 0.827804, 0.831576, 0.835127, 0.838455, 0.841555, 0.844427, 0.847068, 0.849475, 0.851647, 0.853583, 0.855279, 0.856736, 0.857952, 0.858926, 0.859657, 0.860144, 0.860388, 0.860388, 0.860144, 0.859657, 0.858926, 0.857952, 0.856736, 0.855279, 0.853583, 0.851647, 0.849475, 0.847068, 0.844427, 0.841555, 0.838455, 0.835127, 0.831576, 0.827804, 0.823813, 0.819608, 0.815191, 0.810566, 0.805736, 0.800705, 0.795477, 0.790056, 0.784446, 0.778652, 0.772678, 0.766528, 0.760208, 0.753721, 0.747073, 0.740268, 0.733312, 0.726210, 0.718968, 0.711589, 0.704081, 0.696447, 0.688694, 0.680827, 0.672852, 0.664775, 0.656600, 0.648334, 0.639982, 0.631550, 0.623044, 0.614469, 0.605832,
	 0.600139, 0.608696, 0.617190, 0.625616, 0.633969, 0.642242, 0.650430, 0.658528, 0.666530, 0.674430, 0.682223, 0.689903, 0.697465, 0.704903, 0.712212, 0.719387, 0.726422, 0.733312, 0.740053, 0.746639, 0.753064, 0.759326, 0.765418, 0.771336, 0.777076, 0.782633, 0.788002, 0.793181, 0.798165, 0.802949, 0.807531, 0.811907, 0.816073, 0.820025, 0.823762, 0.827280, 0.830576, 0.833648, 0.836493, 0.839109, 0.841493, 0.843645, 0.845562, 0.847243, 0.848686, 0.849890, 0.850855, 0.851579, 0.852062, 0.852304, 0.852304, 0.852062, 0.851579, 0.850855, 0.849890, 0.848686, 0.847243, 0.845562, 0.843645, 0.841493, 0.839109, 0.836493, 0.833648, 0.830576, 0.827280, 0.823762, 0.820025, 0.816073, 0.811907, 0.807531, 0.802949, 0.798165, 0.793181, 0.788002, 0.782633, 0.777076, 0.771336, 0.765418, 0.759326, 0.753064, 0.746639, 0.740053, 0.733312, 0.726422, 0.719387, 0.712212, 0.704903, 0.697465, 0.689903, 0.682223, 0.674430, 0.666530, 0.658528, 0.650430, 0.642242, 0.633969, 0.625616, 0.617190, 0.608696, 0.600139,
	 0.594327, 0.602801, 0.611212, 0.619557, 0.627829, 0.636022, 0.644131, 0.652151, 0.660075, 0.667899, 0.675616, 0.683222, 0.690710, 0.698076, 0.705315, 0.712420, 0.719387, 0.726210, 0.732886, 0.739408, 0.745771, 0.751972, 0.758005, 0.763866, 0.769550, 0.775053, 0.780371, 0.785499, 0.790435, 0.795173, 0.799710, 0.804044, 0.808169, 0.812084, 0.815784, 0.819268, 0.822532, 0.825574, 0.828392, 0.830982, 0.833344, 0.835475, 0.837373, 0.839038, 0.840467, 0.841659, 0.842615, 0.843332, 0.843810, 0.844050, 0.844050, 0.843810, 0.843332, 0.842615, 0.841659, 0.840467, 0.839038, 0.837373, 0.835475, 0.833344, 0.830982, 0.828392, 0.825574, 0.822532, 0.819268, 0.815784, 0.812084, 0.808169, 0.804044, 0.799710, 0.795173, 0.790435, 0.785499, 0.780371, 0.775053, 0.769550, 0.763866, 0.758005, 0.751972, 0.745771, 0.739408, 0.732886, 0.726210, 0.719387, 0.712420, 0.705315, 0.698076, 0.690710, 0.683222, 0.675616, 0.667899, 0.660075, 0.652151, 0.644131, 0.636022, 0.627829, 0.619557, 0.611212, 0.602801, 0.594327,
	 0.588399, 0.596789, 0.605117, 0.613378, 0.621567, 0.629679, 0.637707, 0.645647, 0.653492, 0.661237, 0.668878, 0.676408, 0.683821, 0.691114, 0.698280, 0.705315, 0.712212, 0.718968, 0.725576, 0.732033, 0.738333, 0.744472, 0.750445, 0.756247, 0.761875, 0.767323, 0.772588, 0.777665, 0.782551, 0.787242, 0.791735, 0.796025, 0.800109, 0.803985, 0.807648, 0.811097, 0.814329, 0.817341, 0.820130, 0.822695, 0.825033, 0.827142, 0.829022, 0.830670, 0.832084, 0.833265, 0.834211, 0.834921, 0.835395, 0.835632, 0.835632, 0.835395, 0.834921, 0.834211, 0.833265, 0.832084, 0.830670, 0.829022, 0.827142, 0.825033, 0.822695, 0.820130, 0.817341, 0.814329, 0.811097, 0.807648, 0.803985, 0.800109, 0.796025, 0.791735, 0.787242, 0.782551, 0.777665, 0.772588, 0.767323, 0.761875, 0.756247, 0.750445, 0.744472, 0.738333, 0.732033, 0.725576, 0.718968, 0.712212, 0.705315, 0.698280, 0.691114, 0.683821, 0.676408, 0.668878, 0.661237, 0.653492, 0.645647, 0.637707, 0.629679, 0.621567, 0.613378, 0.605117, 0.596789, 0.588399,
	 0.582361, 0.590664, 0.598907, 0.607083, 0.615188, 0.623217, 0.631163, 0.639021, 0.646785, 0.654451, 0.662013, 0.669466, 0.676804, 0.684021, 0.691114, 0.698076, 0.704903, 0.711589, 0.718130, 0.724521, 0.730756, 0.736832, 0.742744, 0.748486, 0.754056, 0.759448, 0.764659, 0.769685, 0.774521, 0.779163, 0.783609, 0.787855, 0.791898, 0.795734, 0.799360, 0.802773, 0.805972, 0.808953, 0.811713, 0.814252, 0.816566, 0.818654, 0.820514, 0.822145, 0.823545, 0.824714, 0.825650, 0.826353, 0.826821, 0.827056, 0.827056, 0.826821, 0.826353, 0.825650, 0.824714, 0.823545, 0.822145, 0.820514, 0.818654, 0.816566, 0.814252, 0.811713, 0.808953, 0.805972, 0.802773, 0.799360, 0.795734, 0.791898, 0.787855, 0.783609, 0.779163, 0.774521, 0.769685, 0.764659, 0.759448, 0.754056, 0.748486, 0.742744, 0.736832, 0.730756, 0.724521, 0.718130, 0.711589, 0.704903, 0.698076, 0.691114, 0.684021, 0.676804, 0.669466, 0.662013, 0.654451, 0.646785, 0.639021, 0.631163, 0.623217, 0.615188, 0.607083, 0.598907, 0.590664, 0.582361,
	 0.576216, 0.584431, 0.592587, 0.600677, 0.608697, 0.616640, 0.624503, 0.632278, 0.639960, 0.647546, 0.655028, 0.662402, 0.669662, 0.676804, 0.683821, 0.690710, 0.697465, 0.704081, 0.710552, 0.716876, 0.723045, 0.729057, 0.734906, 0.740588, 0.746099, 0.751435, 0.756591, 0.761563, 0.766348, 0.770942, 0.775341, 0.779542, 0.783542, 0.787337, 0.790925, 0.794303, 0.797467, 0.800417, 0.803148, 0.805660, 0.807949, 0.810015, 0.811856, 0.813470, 0.814855, 0.816012, 0.816938, 0.817633, 0.818097, 0.818329, 0.818329, 0.818097, 0.817633, 0.816938, 0.816012, 0.814855, 0.813470, 0.811856, 0.810015, 0.807949, 0.805660, 0.803148, 0.800417, 0.797467, 0.794303, 0.790925, 0.787337, 0.783542, 0.779542, 0.775341, 0.770942, 0.766348, 0.761563, 0.756591, 0.751435, 0.746099, 0.740588, 0.734906, 0.729057, 0.723045, 0.716876, 0.710552, 0.704081, 0.697465, 0.690710, 0.683821, 0.676804, 0.669662, 0.662402, 0.655028, 0.647546, 0.639960, 0.632278, 0.624503, 0.616640, 0.608697, 0.600677, 0.592587, 0.584431, 0.576216,
	 0.569969, 0.578095, 0.586162, 0.594165, 0.602098, 0.609955, 0.617732, 0.625423, 0.633022, 0.640525, 0.647926, 0.655220, 0.662402, 0.669466, 0.676408, 0.683222, 0.689903, 0.696447, 0.702849, 0.709103, 0.715206, 0.721153, 0.726938, 0.732559, 0.738010, 0.743288, 0.748388, 0.753306, 0.758039, 0.762583, 0.766935, 0.771090, 0.775047, 0.778801, 0.782350, 0.785691, 0.788821, 0.791739, 0.794440, 0.796925, 0.799190, 0.801233, 0.803054, 0.804650, 0.806021, 0.807164, 0.808081, 0.808768, 0.809227, 0.809457, 0.809457, 0.809227, 0.808768, 0.808081, 0.807164, 0.806021, 0.804650, 0.803054, 0.801233, 0.799190, 0.796925, 0.794440, 0.791739, 0.788821, 0.785691, 0.782350, 0.778801, 0.775047, 0.771090, 0.766935, 0.762583, 0.758039, 0.753306, 0.748388, 0.743288, 0.738010, 0.732559, 0.726938, 0.721153, 0.715206, 0.709103, 0.702849, 0.696447, 0.689903, 0.683222, 0.676408, 0.669466, 0.662402, 0.655220, 0.647926, 0.640525, 0.633022, 0.625423, 0.617732, 0.609955, 0.602098, 0.594165, 0.586162, 0.578095, 0.569969,
	 0.563624, 0.571660, 0.579637, 0.587551, 0.595395, 0.603165, 0.610855, 0.618460, 0.625975, 0.633395, 0.640713, 0.647926, 0.655028, 0.662013, 0.668878, 0.675616, 0.682223, 0.688694, 0.695025, 0.701210, 0.707244, 0.713125, 0.718846, 0.724404, 0.729795, 0.735013, 0.740057, 0.744920, 0.749601, 0.754094, 0.758397, 0.762506, 0.766419, 0.770131, 0.773641, 0.776945, 0.780040, 0.782925, 0.785597, 0.788053, 0.790293, 0.792314, 0.794114, 0.795693, 0.797048, 0.798179, 0.799085, 0.799765, 0.800219, 0.800446, 0.800446, 0.800219, 0.799765, 0.799085, 0.798179, 0.797048, 0.795693, 0.794114, 0.792314, 0.790293, 0.788053, 0.785597, 0.782925, 0.780040, 0.776945, 0.773641, 0.770131, 0.766419, 0.762506, 0.758397, 0.754094, 0.749601, 0.744920, 0.740057, 0.735013, 0.729795, 0.724404, 0.718846, 0.713125, 0.707244, 0.701210, 0.695025, 0.688694, 0.682223, 0.675616, 0.668878, 0.662013, 0.655028, 0.647926, 0.640713, 0.633395, 0.625975, 0.618460, 0.610855, 0.603165, 0.595395, 0.587551, 0.579637, 0.571660, 0.563624,
	 0.557186, 0.565130, 0.573016, 0.580839, 0.588594, 0.596275, 0.603878, 0.611396, 0.618825, 0.626160, 0.633395, 0.640525, 0.647546, 0.654451, 0.661237, 0.667899, 0.674430, 0.680827, 0.687086, 0.693200, 0.699166, 0.704979, 0.710635, 0.716130, 0.721458, 0.726618, 0.731603, 0.736411, 0.741038, 0.745480, 0.749734, 0.753797, 0.757664, 0.761334, 0.764804, 0.768070, 0.771130, 0.773982, 0.776623, 0.779052, 0.781266, 0.783263, 0.785043, 0.786604, 0.787944, 0.789062, 0.789957, 0.790630, 0.791078, 0.791302, 0.791302, 0.791078, 0.790630, 0.789957, 0.789062, 0.787944, 0.786604, 0.785043, 0.783263, 0.781266, 0.779052, 0.776623, 0.773982, 0.771130, 0.768070, 0.764804, 0.761334, 0.757664, 0.753797, 0.749734, 0.745480, 0.741038, 0.736411, 0.731603, 0.726618, 0.721458, 0.716130, 0.710635, 0.704979, 0.699166, 0.693200, 0.687086, 0.680827, 0.674430, 0.667899, 0.661237, 0.654451, 0.647546, 0.640525, 0.633395, 0.626160, 0.618825, 0.611396, 0.603878, 0.596275, 0.588594, 0.580839, 0.573016, 0.565130, 0.557186,
	 0.550659, 0.558510, 0.566304, 0.574035, 0.581699, 0.589291, 0.596804, 0.604234, 0.611576, 0.618825, 0.625975, 0.633022, 0.639960, 0.646785, 0.653492, 0.660075, 0.666530, 0.672852, 0.679037, 0.685080, 0.690976, 0.696721, 0.702311, 0.707741, 0.713007, 0.718106, 0.723033, 0.727785, 0.732358, 0.736748, 0.740952, 0.744967, 0.748789, 0.752416, 0.755845, 0.759073, 0.762097, 0.764916, 0.767526, 0.769926, 0.772114, 0.774089, 0.775847, 0.777390, 0.778714, 0.779819, 0.780704, 0.781368, 0.781812, 0.782033, 0.782033, 0.781812, 0.781368, 0.780704, 0.779819, 0.778714, 0.777390, 0.775847, 0.774089, 0.772114, 0.769926, 0.767526, 0.764916, 0.762097, 0.759073, 0.755845, 0.752416, 0.748789, 0.744967, 0.740952, 0.736748, 0.732358, 0.727785, 0.723033, 0.718106, 0.713007, 0.707741, 0.702311, 0.696721, 0.690976, 0.685080, 0.679037, 0.672852, 0.666530, 0.660075, 0.653492, 0.646785, 0.639960, 0.633022, 0.625975, 0.618825, 0.611576, 0.604234, 0.596804, 0.589291, 0.581699, 0.574035, 0.566304, 0.558510, 0.550659,
	 0.544048, 0.551805, 0.559505, 0.567144, 0.574716, 0.582216, 0.589639, 0.596980, 0.604234, 0.611396, 0.618460, 0.625423, 0.632278, 0.639021, 0.645647, 0.652151, 0.658528, 0.664775, 0.670885, 0.676855, 0.682681, 0.688357, 0.693879, 0.699244, 0.704448, 0.709485, 0.714353, 0.719048, 0.723566, 0.727903, 0.732057, 0.736023, 0.739800, 0.743383, 0.746771, 0.749960, 0.752948, 0.755733, 0.758312, 0.760683, 0.762845, 0.764796, 0.766533, 0.768057, 0.769365, 0.770457, 0.771331, 0.771988, 0.772426, 0.772645, 0.772645, 0.772426, 0.771988, 0.771331, 0.770457, 0.769365, 0.768057, 0.766533, 0.764796, 0.762845, 0.760683, 0.758312, 0.755733, 0.752948, 0.749960, 0.746771, 0.743383, 0.739800, 0.736023, 0.732057, 0.727903, 0.723566, 0.719048, 0.714353, 0.709485, 0.704448, 0.699244, 0.693879, 0.688357, 0.682681, 0.676855, 0.670885, 0.664775, 0.658528, 0.652151, 0.645647, 0.639021, 0.632278, 0.625423, 0.618460, 0.611396, 0.604234, 0.596980, 0.589639, 0.582216, 0.574716, 0.567144, 0.559505, 0.551805, 0.544048,
	 0.537358, 0.545019, 0.552625, 0.560170, 0.567649, 0.575057, 0.582388, 0.589639, 0.596804, 0.603878, 0.610855, 0.617732, 0.624503, 0.631163, 0.637707, 0.644131, 0.650430, 0.656600, 0.662635, 0.668532, 0.674286, 0.679892, 0.685347, 0.690646, 0.695785, 0.700761, 0.705569, 0.710206, 0.714668, 0.718952, 0.723055, 0.726973, 0.730703, 0.734242, 0.737588, 0.740738, 0.743689, 0.746439, 0.748987, 0.751329, 0.753464, 0.755391, 0.757107, 0.758612, 0.759904, 0.760983, 0.761846, 0.762495, 0.762927, 0.763144, 0.763144, 0.762927, 0.762495, 0.761846, 0.760983, 0.759904, 0.758612, 0.757107, 0.755391, 0.753464, 0.751329, 0.748987, 0.746439, 0.743689, 0.740738, 0.737588, 0.734242, 0.730703, 0.726973, 0.723055, 0.718952, 0.714668, 0.710206, 0.705569, 0.700761, 0.695785, 0.690646, 0.685347, 0.679892, 0.674286, 0.668532, 0.662635, 0.656600, 0.650430, 0.644131, 0.637707, 0.631163, 0.624503, 0.617732, 0.610855, 0.603878, 0.596804, 0.589639, 0.582388, 0.575057, 0.567649, 0.560170, 0.552625, 0.545019, 0.537358,
	 0.530593, 0.538158, 0.545668, 0.553118, 0.560502, 0.567817, 0.575057, 0.582216, 0.589291, 0.596275, 0.603165, 0.609955, 0.616640, 0.623217, 0.629679, 0.636022, 0.642242, 0.648334, 0.654293, 0.660116, 0.665797, 0.671333, 0.676719, 0.681951, 0.687026, 0.691939, 0.696686, 0.701265, 0.705671, 0.709901, 0.713952, 0.717820, 0.721504, 0.724998, 0.728302, 0.731412, 0.734327, 0.737042, 0.739558, 0.741870, 0.743979, 0.745881, 0.747576, 0.749062, 0.750338, 0.751402, 0.752255, 0.752896, 0.753323, 0.753536, 0.753536, 0.753323, 0.752896, 0.752255, 0.751402, 0.750338, 0.749062, 0.747576, 0.745881, 0.743979, 0.741870, 0.739558, 0.737042, 0.734327, 0.731412, 0.728302, 0.724998, 0.721504, 0.717820, 0.713952, 0.709901, 0.705671, 0.701265, 0.696686, 0.691939, 0.687026, 0.681951, 0.676719, 0.671333, 0.665797, 0.660116, 0.654293, 0.648334, 0.642242, 0.636022, 0.629679, 0.623217, 0.616640, 0.609955, 0.603165, 0.596275, 0.589291, 0.582216, 0.575057, 0.567817, 0.560502, 0.553118, 0.545668, 0.538158, 0.530593,
	 0.523758, 0.531225, 0.538639, 0.545992, 0.553282, 0.560502, 0.567649, 0.574716, 0.581699, 0.588594, 0.595395, 0.602098, 0.608697, 0.615188, 0.621567, 0.627829, 0.633969, 0.639982, 0.645865, 0.651612, 0.657220, 0.662685, 0.668001, 0.673166, 0.678175, 0.683025, 0.687712, 0.692231, 0.696581, 0.700756, 0.704755, 0.708574, 0.712209, 0.715659, 0.718920, 0.721990, 0.724867, 0.727548, 0.730031, 0.732313, 0.734395, 0.736273, 0.737946, 0.739412, 0.740672, 0.741723, 0.742565, 0.743197, 0.743618, 0.743829, 0.743829, 0.743618, 0.743197, 0.742565, 0.741723, 0.740672, 0.739412, 0.737946, 0.736273, 0.734395, 0.732313, 0.730031, 0.727548, 0.724867, 0.721990, 0.718920, 0.715659, 0.712209, 0.708574, 0.704755, 0.700756, 0.696581, 0.692231, 0.687712, 0.683025, 0.678175, 0.673166, 0.668001, 0.662685, 0.657220, 0.651612, 0.645865, 0.639982, 0.633969, 0.627829, 0.621567, 0.615188, 0.608697, 0.602098, 0.595395, 0.588594, 0.581699, 0.574716, 0.567649, 0.560502, 0.553282, 0.545992, 0.538639, 0.531225, 0.523758,
	 0.516857, 0.524227, 0.531542, 0.538799, 0.545992, 0.553118, 0.560170, 0.567144, 0.574035, 0.580839, 0.587551, 0.594165, 0.600677, 0.607083, 0.613378, 0.619557, 0.625616, 0.631550, 0.637355, 0.643027, 0.648561, 0.653954, 0.659200, 0.664297, 0.669240, 0.674026, 0.678651, 0.683111, 0.687403, 0.691524, 0.695470, 0.699238, 0.702826, 0.706230, 0.709448, 0.712478, 0.715317, 0.717962, 0.720412, 0.722665, 0.724719, 0.726572, 0.728223, 0.729671, 0.730913, 0.731951, 0.732781, 0.733405, 0.733821, 0.734029, 0.734029, 0.733821, 0.733405, 0.732781, 0.731951, 0.730913, 0.729671, 0.728223, 0.726572, 0.724719, 0.722665, 0.720412, 0.717962, 0.715317, 0.712478, 0.709448, 0.706230, 0.702826, 0.699238, 0.695470, 0.691524, 0.687403, 0.683111, 0.678651, 0.674026, 0.669240, 0.664297, 0.659200, 0.653954, 0.648561, 0.643027, 0.637355, 0.631550, 0.625616, 0.619557, 0.613378, 0.607083, 0.600677, 0.594165, 0.587551, 0.580839, 0.574035, 0.567144, 0.560170, 0.553118, 0.545992, 0.538799, 0.531542, 0.524227, 0.516857,
	 0.509896, 0.517166, 0.524383, 0.531542, 0.538639, 0.545668, 0.552625, 0.559505, 0.566304, 0.573016, 0.579637, 0.586162, 0.592587, 0.598907, 0.605117, 0.611212, 0.617190, 0.623044, 0.628771, 0.634366, 0.639826, 0.645146, 0.650322, 0.655350, 0.660227, 0.664948, 0.669510, 0.673910, 0.678145, 0.682210, 0.686103, 0.689820, 0.693360, 0.696718, 0.699893, 0.702882, 0.705682, 0.708292, 0.710709, 0.712932, 0.714958, 0.716786, 0.718415, 0.719843, 0.721069, 0.722092, 0.722912, 0.723527, 0.723938, 0.724143, 0.724143, 0.723938, 0.723527, 0.722912, 0.722092, 0.721069, 0.719843, 0.718415, 0.716786, 0.714958, 0.712932, 0.710709, 0.708292, 0.705682, 0.702882, 0.699893, 0.696718, 0.693360, 0.689820, 0.686103, 0.682210, 0.678145, 0.673910, 0.669510, 0.664948, 0.660227, 0.655350, 0.650322, 0.645146, 0.639826, 0.634366, 0.628771, 0.623044, 0.617190, 0.611212, 0.605117, 0.598907, 0.592587, 0.586162, 0.579637, 0.573016, 0.566304, 0.559505, 0.552625, 0.545668, 0.538639, 0.531542, 0.524383, 0.517166, 0.509896,
	 0.502878, 0.510048, 0.517166, 0.524227, 0.531225, 0.538158, 0.545019, 0.551805, 0.558510, 0.565130, 0.571660, 0.578095, 0.584431, 0.590664, 0.596789, 0.602801, 0.608696, 0.614469, 0.620117, 0.625636, 0.631020, 0.636267, 0.641372, 0.646331, 0.651140, 0.655796, 0.660296, 0.664636, 0.668811, 0.672821, 0.676660, 0.680326, 0.683817, 0.687129, 0.690261, 0.693208, 0.695970, 0.698544, 0.700928, 0.703120, 0.705118, 0.706921, 0.708527, 0.709936, 0.711145, 0.712154, 0.712963, 0.713569, 0.713974, 0.714177, 0.714177, 0.713974, 0.713569, 0.712963, 0.712154, 0.711145, 0.709936, 0.708527, 0.706921, 0.705118, 0.703120, 0.700928, 0.698544, 0.695970, 0.693208, 0.690261, 0.687129, 0.683817, 0.680326, 0.676660, 0.672821, 0.668811, 0.664636, 0.660296, 0.655796, 0.651140, 0.646331, 0.641372, 0.636267, 0.631020, 0.625636, 0.620117, 0.614469, 0.608696, 0.602801, 0.596789, 0.590664, 0.584431, 0.578095, 0.571660, 0.565130, 0.558510, 0.551805, 0.545019, 0.538158, 0.531225, 0.524227, 0.517166, 0.510048, 0.502878,
	 0.495809, 0.502878, 0.509896, 0.516857, 0.523758, 0.530593, 0.537358, 0.544048, 0.550659, 0.557186, 0.563624, 0.569969, 0.576216, 0.582361, 0.588399, 0.594327, 0.600139, 0.605832, 0.611400, 0.616841, 0.622150, 0.627323, 0.632356, 0.637245, 0.641987, 0.646578, 0.651014, 0.655293, 0.659410, 0.663363, 0.667148, 0.670763, 0.674205, 0.677470, 0.680557, 0.683464, 0.686187, 0.688725, 0.691075, 0.693236, 0.695206, 0.696984, 0.698568, 0.699956, 0.701148, 0.702143, 0.702940, 0.703539, 0.703938, 0.704137, 0.704137, 0.703938, 0.703539, 0.702940, 0.702143, 0.701148, 0.699956, 0.698568, 0.696984, 0.695206, 0.693236, 0.691075, 0.688725, 0.686187, 0.683464, 0.680557, 0.677470, 0.674205, 0.670763, 0.667148, 0.663363, 0.659410, 0.655293, 0.651014, 0.646578, 0.641987, 0.637245, 0.632356, 0.627323, 0.622150, 0.616841, 0.611400, 0.605832, 0.600139, 0.594327, 0.588399, 0.582361, 0.576216, 0.569969, 0.563624, 0.557186, 0.550659, 0.544048, 0.537358, 0.530593, 0.523758, 0.516857, 0.509896, 0.502878, 0.495809,
};

//////////////////////////////////////////////////////////////////////////
// BEGIN: REGION CONTRAST SALIENCY - CENTER BIASED
//////////////////////////////////////////////////////////////////////////

Mat RegionSaliency::GetRCCB(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma, 
        double centerBiasWeight, double centerBiasHeightSigma, double centerBiasWidthSigma, const CenterBiasCombinationType_t cbct)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrast(regs, color3fv, regSal1v, sigmaDist);
  
//   int nrows = img3f.rows;
//   int ncols = img3f.cols;
  //const float centerBiasWeight = 0.5;
  float* regsCenterBias = new float[regNum]; // the center-bias for each region
  float w0 = (float)centerBiasWidthSigma;    // std. dev. of the Gaussian (width)
  float h0 = (float)centerBiasHeightSigma;   // std. dev. of the Gaussian (height)
  for (int i = 0; i < regNum; i++)
  {
    const float x0 = 0.5;
    const float y0 = 0.5;

    regsCenterBias[i] = ( exp((-SQR(regs[i].centroid.x-x0))/SQR(w0)) * exp((-SQR(regs[i].centroid.y-y0))/SQR(h0)) );
  }

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++)
  {
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
    {
      switch (cbct)
      {
        case CB_LINEAR:
          sal[c] = (1-centerBiasWeight)*regSal[regIdx[c]] + centerBiasWeight*regsCenterBias[regIdx[c]];
          break;
        case CB_PRODUCT:
          sal[c] = regSal[regIdx[c]] * regsCenterBias[regIdx[c]]; // weighting in this case would have no influence
          break;
        case CB_MAX:
          sal[c] = std::max((1-centerBiasWeight)*regSal[regIdx[c]], centerBiasWeight*regsCenterBias[regIdx[c]]);
          break;
        case CB_MIN:
          sal[c] = std::min((1-centerBiasWeight)*regSal[regIdx[c]], centerBiasWeight*regsCenterBias[regIdx[c]]);
          break;
        default:
          assert(false);
          exit(-1);
      }
    }
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
  
  delete [] regsCenterBias;
  
	return sal1f;
}

Mat RegionSaliency::GetRCCBDebiased(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma, 
                                    double centerBiasWeight, double centerBiasHeightSigma, double centerBiasWidthSigma)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrastDebiased(regs, color3fv, regSal1v, sigmaDist); // use debiased metric here; everything else should be exactly the same as RegionSaliency::GetRCCB
  
  float* regsCenterBias = new float[regNum]; // the center-bias for each region
  float w0 = (float)centerBiasWidthSigma;    // std. dev. of the Gaussian (width)
  float h0 = (float)centerBiasHeightSigma;   // std. dev. of the Gaussian (height)
  for (int i = 0; i < regNum; i++)
  {
    const float x0 = 0.5;
    const float y0 = 0.5;

    regsCenterBias[i] = ( exp((-SQR(regs[i].centroid.x-x0))/SQR(w0)) * exp((-SQR(regs[i].centroid.y-y0))/SQR(h0)) );
  }

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++)
  {
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
    {
      sal[c] = (1-centerBiasWeight)*regSal[regIdx[c]] + centerBiasWeight*regsCenterBias[regIdx[c]];
    }
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
  
  delete [] regsCenterBias;
  
	return sal1f;
}

Mat RegionSaliency::GetRCCBLocallyDebiased(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma, 
                                    double centerBiasWeight, double centerBiasHeightSigma, double centerBiasWidthSigma, const CenterBiasCombinationType_t cbct)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrastLocallyDebiased(regs, color3fv, regSal1v, sigmaDist); // use debiased metric here; everything else should be exactly the same as RegionSaliency::GetRCCB
  
  float* regsCenterBias = new float[regNum]; // the center-bias for each region
  float w0 = (float)centerBiasWidthSigma;    // std. dev. of the Gaussian (width)
  float h0 = (float)centerBiasHeightSigma;   // std. dev. of the Gaussian (height)
  for (int i = 0; i < regNum; i++)
  {
    const float x0 = 0.5;
    const float y0 = 0.5;

    regsCenterBias[i] = ( exp((-SQR(regs[i].centroid.x-x0))/SQR(w0)) * exp((-SQR(regs[i].centroid.y-y0))/SQR(h0)) );
  }

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++)
  {
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
    {
      switch (cbct)
      {
        case CB_LINEAR:
          sal[c] = (1-centerBiasWeight)*regSal[regIdx[c]] + centerBiasWeight*regsCenterBias[regIdx[c]];
          break;
        case CB_PRODUCT:
          sal[c] = regSal[regIdx[c]] * regsCenterBias[regIdx[c]]; // weighting in this case would have no influence
          break;
        case CB_MAX:
          sal[c] = std::max((1-centerBiasWeight)*regSal[regIdx[c]], centerBiasWeight*regsCenterBias[regIdx[c]]);
          break;
        case CB_MIN:
          sal[c] = std::min((1-centerBiasWeight)*regSal[regIdx[c]], centerBiasWeight*regsCenterBias[regIdx[c]]);
          break;
        default:
          assert(false);
          exit(-1);
      }
    }
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
  
  delete [] regsCenterBias;
  
	return sal1f;
}

Mat RegionSaliency::GetRCDebiased(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrastDebiased(regs, color3fv, regSal1v, sigmaDist);

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++){
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
			sal[c] = regSal[regIdx[c]];
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
	return sal1f;
}

void RegionSaliency::RegionContrastDebiased(const vector<Region> &regs, const Mat &color3fv, Mat& regSal1d, double sigmaDist)
{	
	Mat_<float> cDistCache1f = Mat::zeros(color3fv.cols, color3fv.cols, CV_32F);
  {
		Vec3f* pColor = (Vec3f*)color3fv.data;
		for(int i = 0; i < cDistCache1f.rows; i++)
    {
			for(int j= i+1; j < cDistCache1f.cols; j++)
      {
				cDistCache1f[i][j] = cDistCache1f[j][i] = vecDist3(pColor[i], pColor[j]);
      }
    }
	}
  
	int regNum = (int)regs.size();
	Mat_<double> rDistCache1d = Mat::zeros(regNum, regNum, CV_64F);
	regSal1d = Mat::zeros(1, regNum, CV_64F);
	double* regSal = (double*)regSal1d.data;
	for (int i = 0; i < regNum; i++)
  {
		for (int j = 0; j < regNum; j++)
    {
      /* 
       * 1. Calculate the color (dd) and spatial distance (rDistCache1d) 
       *    between all regions 
       */
			if(i<j)
      {
				double dd = 0;
				const vector<CostfIdx> &c1 = regs[i].freIdx, &c2 = regs[j].freIdx;
				for (size_t m = 0; m < c1.size(); m++)
        {
					for (size_t n = 0; n < c2.size(); n++)
          {
            dd += cDistCache1f[c1[m].second][c2[n].second] * c1[m].first * c2[n].first;
          }
        }
				rDistCache1d[j][i] = rDistCache1d[i][j] = dd;
        //////////////////////////////////////////////////////
        // ADAPT SPATIAL DISTANCE METRIC HERE FOR DEBIASING //
        //////////////////////////////////////////////////////
        rDistCache1d[j][i] = rDistCache1d[i][j] *= exp(-pntSqrDist(regs[i].centroid, regs[j].centroid)/sigmaDist); 
			}
      
      /* 
       * 2. Calculate/Set the saliency for each region 
       */
      ////////////////////////////////////////////////////////////////////
      // ADAPT rDistCache1d HERE FOR DEBIASING THE SALIENCY OF A REGION //
      // DEPENDING ON IT'S LOCATION IN THE IMAGE                        //
      ////////////////////////////////////////////////////////////////////
			regSal[i] += regs[j].pixNum * rDistCache1d[i][j];
		}
    
    // get the center bias from the table
    int x = (int)floor(regs[i].centroid.x*(debias_matrix_ncols-1));
    int y = (int)floor(regs[i].centroid.y*(debias_matrix_nrows-1));
    x = std::min(x,debias_matrix_ncols-1);
    y = std::min(y,debias_matrix_nrows-1);
    double center_bias = x*debias_matrix_nrows + y;
    // normalize
    assert(debias_matrix_sigma == sigmaDist);
    regSal[i] /= center_bias;
	}
}

Mat RegionSaliency::GetRCLocallyDebiased(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrastLocallyDebiased(regs, color3fv, regSal1v, sigmaDist);

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++){
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
			sal[c] = regSal[regIdx[c]];
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
	return sal1f;
}

// the weight sum is 1 for all regions
void RegionSaliency::RegionContrastLocallyDebiased(const vector<Region> &regs, const Mat &color3fv, Mat& regSal1d, double sigmaDist)
{	
  // color distance cache
	Mat_<float> cDistCache1f = Mat::zeros(color3fv.cols, color3fv.cols, CV_32F);
  {
		Vec3f* pColor = (Vec3f*)color3fv.data;
		for(int i = 0; i < cDistCache1f.rows; i++)
			for(int j= i+1; j < cDistCache1f.cols; j++)
				cDistCache1f[i][j] = cDistCache1f[j][i] = vecDist3(pColor[i], pColor[j]);
	}
  
  // spatial distance cache
  int regNum = (int)regs.size();
  Mat_<double> sDistCache1d = Mat::zeros(regNum, regNum, CV_64F);
  Mat_<double> sDistCache1dSum = Mat::zeros(regNum, 1, CV_64F);
  {
    for (int i = 0; i < regNum; i++)
    {
      for (int j = 0; j < regNum; j++)
      {
        sDistCache1d[j][i]     = sDistCache1d[i][j] = exp(-pntSqrDist(regs[i].centroid, regs[j].centroid)/sigmaDist); 
        sDistCache1dSum[i][0] += sDistCache1d[j][i];
      }
    }
  }
  // normalize the distance sum
  {
    for (int i = 0; i < regNum; i++)
    {
      for (int j = 0; j < regNum; j++)
      {
        sDistCache1d[j][i] /= sDistCache1dSum[i][0];
      }
    }
  }

	Mat_<double> rDistCache1d = Mat::zeros(regNum, regNum, CV_64F);
	regSal1d = Mat::zeros(1, regNum, CV_64F);
	double* regSal = (double*)regSal1d.data;
	for (int i = 0; i < regNum; i++){
		for (int j = 0; j < regNum; j++){
			if(i<j) {
				double dd = 0;
				const vector<CostfIdx> &c1 = regs[i].freIdx, &c2 = regs[j].freIdx;
				for (size_t m = 0; m < c1.size(); m++)
					for (size_t n = 0; n < c2.size(); n++)
						dd += cDistCache1f[c1[m].second][c2[n].second] * c1[m].first * c2[n].first;
				rDistCache1d[j][i] = rDistCache1d[i][j] = dd * sDistCache1d[i][j]; 
			}
			regSal[i] += regs[j].pixNum * rDistCache1d[i][j];
		}
	}
}

//////////////////////////////////////////////////////////////////////////
// END: REGION CONTRAST SALIENCY - CENTER BIASED
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// BEGIN: REGION CONTRAST SALIENCY
//////////////////////////////////////////////////////////////////////////

Mat RegionSaliency::GetRC(const Mat &img3f)
{
	return GetRC(img3f, 0.4, 50, 50, 0.5);
}

Mat RegionSaliency::GetRC(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
	cvtColor(img3f, _img3f, CV_BGR2Lab);
	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrast(regs, color3fv, regSal1v, sigmaDist);

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++){
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
			sal[c] = regSal[regIdx[c]];
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
	return sal1f;
}

Mat RegionSaliency::GetRCNoColorConversion(const Mat &img3f)
{
	return GetRC(img3f, 0.4, 50, 50, 0.5);
}

Mat RegionSaliency::GetRCNoColorConversion(const Mat &img3f, double sigmaDist, double segK, int segMinSize, double segSigma)
{
	Mat regIdx1i, colorIdx1i, regSal1v, tmp, _img3f, color3fv;
	if (Quantize(img3f, colorIdx1i, color3fv, tmp) <= 2) // Color quantization
		return Mat::zeros(img3f.size(), CV_32F);
  _img3f = img3f.clone();
// 	cvtColor(img3f, _img3f, CV_BGR2Lab);
// 	cvtColor(color3fv, color3fv, CV_BGR2Lab);
	int regNum = SegmentImage(_img3f, regIdx1i, segSigma, segK, segMinSize);	
	vector<Region> regs(regNum);
	BuildRegions(regIdx1i, regs, colorIdx1i, color3fv.cols);
	RegionContrast(regs, color3fv, regSal1v, sigmaDist);

	Mat sal1f = Mat::zeros(img3f.size(), CV_32F);
	cv::normalize(regSal1v, regSal1v, 0, 1, NORM_MINMAX, CV_32F);
	float* regSal = (float*)regSal1v.data;
	for (int r = 0; r < img3f.rows; r++){
		const int* regIdx = regIdx1i.ptr<int>(r);
		float* sal = sal1f.ptr<float>(r);
		for (int c = 0; c < img3f.cols; c++)
			sal[c] = regSal[regIdx[c]];
	}
	GaussianBlur(sal1f, sal1f, Size(3, 3), 0);
	return sal1f;
}

void RegionSaliency::BuildRegions(const Mat& regIdx1i, vector<Region> &regs, const Mat &colorIdx1i, int colorNum)
{
	int rows = regIdx1i.rows, cols = regIdx1i.cols, regNum = (int)regs.size();
	Mat_<int> regColorFre1i = Mat_<int>::zeros(regNum, colorNum); // region color frequency
	for (int y = 0; y < rows; y++){
		const int *regIdx = regIdx1i.ptr<int>(y);
		const int *colorIdx = colorIdx1i.ptr<int>(y);
		for (int x = 0; x < cols; x++, regIdx++, colorIdx++){
			Region &reg = regs[*regIdx];
			reg.pixNum ++;
			reg.centroid.x += x;
			reg.centroid.y += y;
			regColorFre1i(*regIdx, *colorIdx)++;
		}
	}

	for (int i = 0; i < regNum; i++){
		Region &reg = regs[i];
		reg.centroid.x /= reg.pixNum * cols;
		reg.centroid.y /= reg.pixNum * rows;
		int *regColorFre = regColorFre1i.ptr<int>(i);
		for (int j = 0; j < colorNum; j++){
			float fre = (float)regColorFre[j]/(float)reg.pixNum;
			if (regColorFre[j])
				reg.freIdx.push_back(make_pair(fre, j));
		}
	}
}

void RegionSaliency::RegionContrast(const vector<Region> &regs, const Mat &color3fv, Mat& regSal1d, double sigmaDist)
{	
	Mat_<float> cDistCache1f = Mat::zeros(color3fv.cols, color3fv.cols, CV_32F);{
		Vec3f* pColor = (Vec3f*)color3fv.data;
		for(int i = 0; i < cDistCache1f.rows; i++)
			for(int j= i+1; j < cDistCache1f.cols; j++)
				cDistCache1f[i][j] = cDistCache1f[j][i] = vecDist3(pColor[i], pColor[j]);
	}

	int regNum = (int)regs.size();
	Mat_<double> rDistCache1d = Mat::zeros(regNum, regNum, CV_64F);
	regSal1d = Mat::zeros(1, regNum, CV_64F);
	double* regSal = (double*)regSal1d.data;
	for (int i = 0; i < regNum; i++){
		for (int j = 0; j < regNum; j++){
			if(i<j) {
				double dd = 0;
				const vector<CostfIdx> &c1 = regs[i].freIdx, &c2 = regs[j].freIdx;
				for (size_t m = 0; m < c1.size(); m++)
					for (size_t n = 0; n < c2.size(); n++)
						dd += cDistCache1f[c1[m].second][c2[n].second] * c1[m].first * c2[n].first;
				rDistCache1d[j][i] = rDistCache1d[i][j] = dd * exp(-pntSqrDist(regs[i].centroid, regs[j].centroid)/sigmaDist); 
			}
			regSal[i] += regs[j].pixNum * rDistCache1d[i][j];
		}
	}
  
//   ///
//   // Debug output of the weight sum
//   ///
// //#define _GENERATE_SEGMENT_WEIGHT_SUM_STATISTICS
// #ifdef _GENERATE_SEGMENT_WEIGHT_SUM_STATISTICS
//   double* regWeightSum = new double[regNum];
//   for (int i = 0; i < regNum; i++)
//   {
//     regWeightSum[i] = 0;
// 		for (int j = 0; j < regNum; j++)
//     {
//       regWeightSum[i] += exp(-pntSqrDist(regs[i].centroid, regs[j].centroid)/sigmaDist);
//     }
//     FILE* fd = fopen("segment_weight_sums.txt","a");
//     fprintf(fd,"%f %f %f\n", regs[i].centroid.x, regs[i].centroid.y, regWeightSum[i]);
//     fclose(fd);
//   }
// #endif
}

//////////////////////////////////////////////////////////////////////////
// END: REGION CONTRAST SALIENCY
//////////////////////////////////////////////////////////////////////////

Mat RegionSaliency::GetFT(const Mat &img3f)
{
	CV_Assert(img3f.data != NULL && img3f.type() == CV_32FC3);
	Mat sal(img3f.size(), CV_32F), tImg;
	GaussianBlur(img3f, tImg, Size(3, 3), 0);
	cvtColor(tImg, tImg, CV_BGR2Lab);
	Scalar colorM = mean(tImg);
	for (int r = 0; r < tImg.rows; r++)
	{
		float *s = sal.ptr<float>(r);
		float *lab = tImg.ptr<float>(r);
		for (int c = 0; c < tImg.cols; c++, lab += 3)
			s[c] = (float)(sqr(colorM[0] - lab[0]) + sqr(colorM[1] - lab[1]) + sqr(colorM[2] - lab[2]));
	}
	normalize(sal, sal, 0, 1, NORM_MINMAX);
	return sal;
}

Mat RegionSaliency::GetHC(const Mat &img3f)
{
	// Quantize colors and
	Mat idx1i, binColor3f, colorNums1i, weight1f, _colorSal;
	Quantize(img3f, idx1i, binColor3f, colorNums1i);
	cvtColor(binColor3f, binColor3f, CV_BGR2Lab);

	normalize(colorNums1i, weight1f, 1, 0, NORM_L1, CV_32F);
	GetHC(binColor3f, weight1f, _colorSal);
	float* colorSal = (float*)(_colorSal.data);
	Mat salHC1f(img3f.size(), CV_32F);
	for (int r = 0; r < img3f.rows; r++)
	{
		float* salV = salHC1f.ptr<float>(r);
		int* _idx = idx1i.ptr<int>(r);
		for (int c = 0; c < img3f.cols; c++)
			salV[c] = colorSal[_idx[c]];
	}
	GaussianBlur(salHC1f, salHC1f, Size(3, 3), 0);
	normalize(salHC1f, salHC1f, 0, 1, NORM_MINMAX);
	return salHC1f;
}

Mat RegionSaliency::GetLC(const Mat &img3f)
{
	Mat img;
	cvtColor(img3f, img, CV_BGR2GRAY);
	img.convertTo(img, CV_8U, 255);
	double f[256], s[256];
	memset(f, 0, 256*sizeof(double));
	memset(s, 0, 256*sizeof(double));
	for (int r = 0; r < img.rows; r++)
	{
		byte_t* data = img.ptr<byte_t>(r);
		for (int c = 0; c < img.cols; c++)
			f[data[c]] += 1;
	}
	for (int i = 0; i < 256; i++)
		for (int j = 0; j < 256; j++)
			s[i] += abs(i - j) * f[j];
	Mat sal1f(img3f.size(), CV_64F);
	for (int r = 0; r < img.rows; r++)
	{
		byte_t* data = img.ptr<byte_t>(r);
		double* sal = sal1f.ptr<double>(r);
		for (int c = 0; c < img.cols; c++)
			sal[c] = s[data[c]];
	}
	normalize(sal1f, sal1f, 0, 1, NORM_MINMAX, CV_32F);
	return sal1f;
}

Mat RegionSaliency::GetSR(const Mat &img3f)
{
	Size sz(64, 64);
	Mat img1f[2], sr1f, cmplxSrc2f, cmplxDst2f;
	cvtColor(img3f, img1f[1], CV_BGR2GRAY);
	resize(img1f[1], img1f[0], sz, 0, 0, CV_INTER_AREA); 

	img1f[1] = Mat::zeros(sz, CV_32F);
	merge(img1f, 2, cmplxSrc2f);
	dft(cmplxSrc2f, cmplxDst2f);
	AbsAngle(cmplxDst2f, img1f[0], img1f[1]);

	log(img1f[0], img1f[0]);
	blur(img1f[0], sr1f, Size(3, 3));
	sr1f = img1f[0] - sr1f;

	exp(sr1f, sr1f);
	GetCmplx(sr1f, img1f[1], cmplxDst2f);
	dft(cmplxDst2f, cmplxSrc2f, DFT_INVERSE | DFT_SCALE);
	split(cmplxSrc2f, img1f);

	pow(img1f[0], 2, img1f[0]);
	pow(img1f[1], 2, img1f[1]);
	img1f[0] += img1f[1];

	GaussianBlur(img1f[0], img1f[0], Size(3, 3), 0);
	normalize(img1f[0], img1f[0], 0, 1, NORM_MINMAX);
	resize(img1f[0], img1f[1], img3f.size(), 0, 0, INTER_CUBIC);

	return img1f[1];
}

void RegionSaliency::GetHC(const Mat &binColor3f, const Mat &weight1f, Mat &_colorSal)
{
	int binN = binColor3f.cols; 
	_colorSal = Mat::zeros(1, binN, CV_32F);
	float* colorSal = (float*)(_colorSal.data);
	vector<vector<CostfIdx> > similar(binN); // Similar color: how similar and their index
	Vec3f* color = (Vec3f*)(binColor3f.data);
	float *w = (float*)(weight1f.data);
	for (int i = 0; i < binN; i++)
	{
		vector<CostfIdx> &similari = similar[i];
		similari.push_back(make_pair(0.f, i));
		for (int j = 0; j < binN; j++)
		{
			if (i == j)
				continue;
			float dij = vecDist3<float>(color[i], color[j]);
			similari.push_back(make_pair(dij, j));
			colorSal[i] += w[j] * dij;
		}
		sort(similari.begin(), similari.end());
	}

	SmoothSaliency(binColor3f, _colorSal, 4.0f, similar);
}

void RegionSaliency::SmoothSaliency(const Mat &binColor3f, Mat &sal1d, float delta, const vector<vector<CostfIdx> > &similar)
{
	if (sal1d.cols < 2)
		return;
	CV_Assert(binColor3f.size() == sal1d.size() && sal1d.rows == 1);
	int binN = binColor3f.cols;
	Vec3f* color = (Vec3f*)(binColor3f.data);
	Mat tmpSal;
	sal1d.copyTo(tmpSal);
	float *sal = (float*)(tmpSal.data);
	float *nSal = (float*)(sal1d.data);

	//* Distance based smooth
	int n = max(cvRound(binN/delta), 2);
	vecF dist(n, 0), val(n);
	for (int i = 0; i < binN; i++)
	{
		const vector<CostfIdx> &similari = similar[i];
		float totalDist = 0;

		val[0] = sal[i];
		for (int j = 1; j < n; j++)
		{
			int ithIdx =similari[j].second;
			dist[j] = similari[j].first;
			val[j] = sal[ithIdx];
			totalDist += dist[j];
		}
		float valCrnt = 0;
		for (int j = 0; j < n; j++)
			valCrnt += val[j] * (totalDist - dist[j]);

		nSal[i] =  valCrnt / ((n-1) * totalDist);
	}	
	//*/

	/* Gaussian smooth
	const float guassCoeff = -0.5f/(delta*delta);
	for (int i = 0; i < binN; i++)
	{
		const vector<CostfIdx> &similari = similar[i];
		float RegionSaliencyI = sal[i], totalW = 1;

		for (int j = 1; j < binN; j++)
		{
			float w = expf(sqr(similari[j].first)*guassCoeff);
			if (w < 1e-8f)
				break;
			RegionSaliencyI += w * sal[similari[j].second];
			totalW += w;
		}
		nSal[i] = RegionSaliencyI / totalW;
	}
	//*/
}


int RegionSaliency::Quantize(const Mat& img3f, Mat &idx1i, Mat &_color3f, Mat &_colorNum, double ratio)
{
	static const int clrNums[3] = {12, 12, 12};
	static const float clrTmp[3] = {clrNums[0] - 0.0001f, clrNums[1] - 0.0001f, clrNums[2] - 0.0001f};
	static const int w[3] = {clrNums[1] * clrNums[2], clrNums[2], 1};

	CV_Assert(img3f.data != NULL);
	idx1i = Mat::zeros(img3f.size(), CV_32S);
	int rows = img3f.rows, cols = img3f.cols;
	if (img3f.isContinuous() && idx1i.isContinuous())
	{
		cols *= rows;
		rows = 1;
	}

	// Build color pallet
	map<int, int> pallet;
	for (int y = 0; y < rows; y++)
	{
		const float* imgData = img3f.ptr<float>(y);
		int* idx = idx1i.ptr<int>(y);
		for (int x = 0; x < cols; x++, imgData += 3)
		{
			idx[x] = (int)(imgData[0]*clrTmp[0])*w[0] + (int)(imgData[1]*clrTmp[1])*w[1] + (int)(imgData[2]*clrTmp[2]);
			pallet[idx[x]] ++;
		}
	}

	// Find significant colors
	int maxNum = 0;
	{
		int count = 0;
		vector<pair<int, int> > num; // (num, color) pairs in num
		num.reserve(pallet.size());
		for (map<int, int>::iterator it = pallet.begin(); it != pallet.end(); it++)
			num.push_back(pair<int, int>(it->second, it->first)); // (color, num) pairs in pallet
		sort(num.begin(), num.end(), std::greater<pair<int, int> >());

		maxNum = (int)num.size();
		int maxDropNum = cvRound(rows * cols * (1-ratio));
		for (int crnt = num[maxNum-1].first; crnt < maxDropNum && maxNum > 1; maxNum--)
			crnt += num[maxNum - 2].first;
		maxNum = min(maxNum, 256); // To avoid very rarely case
		if (maxNum < 10)
			maxNum = min((int)pallet.size(), 100);
		pallet.clear();
		for (int i = 0; i < maxNum; i++)
			pallet[num[i].second] = i; 

		vector<Vec3i> color3i(num.size());
		for (unsigned int i = 0; i < num.size(); i++)
		{
			color3i[i][0] = num[i].second / w[0];
			color3i[i][1] = num[i].second % w[0] / w[1];
			color3i[i][2] = num[i].second % w[1];
		}

		for (unsigned int i = maxNum; i < num.size(); i++)
		{
			int simIdx = 0, simVal = INT_MAX;
			for (int j = 0; j < maxNum; j++)
			{
				int d_ij = vecSqrDist3(color3i[i], color3i[j]);
				if (d_ij < simVal)
					simVal = d_ij, simIdx = j;
			}
			pallet[num[i].second] = pallet[num[simIdx].second];
		}
	}

	_color3f = Mat::zeros(1, maxNum, CV_32FC3);
	_colorNum = Mat::zeros(_color3f.size(), CV_32S);

	Vec3f* color = (Vec3f*)(_color3f.data);
	int* colorNum = (int*)(_colorNum.data);
	for (int y = 0; y < rows; y++) 
	{
		const Vec3f* imgData = img3f.ptr<Vec3f>(y);
		int* idx = idx1i.ptr<int>(y);
		for (int x = 0; x < cols; x++)
		{
			idx[x] = pallet[idx[x]];
			color[idx[x]] += imgData[x];
			colorNum[idx[x]] ++;
		}
	}
	for (int i = 0; i < _color3f.cols; i++)
		color[i] /= colorNum[i];

	return _color3f.cols;
}

void RegionSaliency::AbsAngle(const Mat& cmplx32FC2, Mat& mag32FC1, Mat& ang32FC1)
{
	CV_Assert(cmplx32FC2.type() == CV_32FC2);
	mag32FC1.create(cmplx32FC2.size(), CV_32FC1);
	ang32FC1.create(cmplx32FC2.size(), CV_32FC1);

	for (int y = 0; y < cmplx32FC2.rows; y++)
	{
		const float* cmpD = cmplx32FC2.ptr<float>(y);
		float* dataA = ang32FC1.ptr<float>(y);
		float* dataM = mag32FC1.ptr<float>(y);
		for (int x = 0; x < cmplx32FC2.cols; x++, cmpD += 2)
		{
			dataA[x] = atan2(cmpD[1], cmpD[0]);
			dataM[x] = sqrt(cmpD[0] * cmpD[0] + cmpD[1] * cmpD[1]);
		}
	}
}

void RegionSaliency::GetCmplx(const Mat& mag32F, const Mat& ang32F, Mat& cmplx32FC2)
{
	CV_Assert(mag32F.type() == CV_32FC1 && ang32F.type() == CV_32FC1 && mag32F.size() == ang32F.size());
	cmplx32FC2.create(mag32F.size(), CV_32FC2);
	for (int y = 0; y < mag32F.rows; y++)
	{
		float* cmpD = cmplx32FC2.ptr<float>(y);
		const float* dataA = ang32F.ptr<float>(y);
		const float* dataM = mag32F.ptr<float>(y);
		for (int x = 0; x < mag32F.cols; x++, cmpD += 2)
		{
			cmpD[0] = dataM[x] * cos(dataA[x]);
			cmpD[1] = dataM[x] * sin(dataA[x]);
		}
	}
}

// void RegionSaliency::Get(const string &imgNameW, const string &salFileDir)
// {
// 	vector<string> names; 
// 	string inDir;
// 	int imgNum = CmFile::GetNamesNE(imgNameW, names, inDir);
// 	CmFile::MkDir(salFileDir);
// 	//vector<CmTimer> timer;
// 	//for (int f = 0; f < SAL_TYPE_NUM; f++)
// 	//	timer.push_back(CmTimer(SAL_TYPE_DES[f]));
// 
// 	//disable omp parallel when testing the running efficiency
// 	#pragma omp parallel for 
// 	for (int i = 0; i < imgNum; i++)
// 	{
// 		CmLog::LogProgress("Processing %d/%dth image: %-40s\r", i, imgNum, names[i].c_str());
// 		Mat sal, img3f = imread(inDir + names[i] + ".jpg");
// 		CmFile::Copy(inDir + names[i] + ".jpg", salFileDir + names[i] + ".jpg");
// 		img3f.convertTo(img3f, CV_32FC3, 1.0/255);
// 
// 		for (int f = 0; f < SAL_TYPE_NUM; f++)
// 		{
// 			//timer[f].Start();
// 			sal = gFuns[f](img3f);
// 			//timer[f].Stop();
// 			imwrite(salFileDir + names[i] + SAL_TYPE_DES[f] + ".png", sal*255);
// 		}
// 	}
// 	//for (int f = 0; f < SAL_TYPE_NUM; f++)
// 	//	timer[f].Report();
// 	CmLog::LogLine("Get RegionSaliency finished%-40s\n", "");
// }

// void RegionSaliency::Evaluate(const string gtImgsW, const string &salDir, const string &resName)
// {
// 	vector<vecD> prec(SAL_TYPE_NUM), recall(SAL_TYPE_NUM);
// 	static const int SHOW_COLOR_NUM = 7;
// 	static const char* colorShow[SHOW_COLOR_NUM] = {"'k'", "'b'", "'g'", "'r'", "'c'", "'m'", "'y'"};
// 	FILE* f = fopen(resName.c_str(), "w");
// 	CV_Assert(f != NULL);
// 	fprintf(f, "clear;\nclose all;\nclc;\nhold on;\nfigure(1);\n\n");
// 
// #pragma omp parallel for
// 	for (int i = 0; i < SAL_TYPE_NUM; i++)
// 		Evaluate(salDir + "*" + SAL_TYPE_DES[i] + ".png", gtImgsW, prec[i], recall[i]);
// 
// 	string leglendStr("legend(");
// 	for (int i = 0; i < SAL_TYPE_NUM; i++)
// 	{
// 		string strPre = format("Precision%s", SAL_TYPE_DES[i]);
// 		string strRecal = format("Recall%s", SAL_TYPE_DES[i]);
// 		int dim = PrintVector(f, recall[i], strRecal);
// 		PrintVector(f, prec[i], strPre, dim);
// 		fprintf(f, "plot(%s, %s, %s, 'linewidth', 2);\n\n", strRecal.c_str(), strPre.c_str(), colorShow[i % SHOW_COLOR_NUM]);
// 		leglendStr += format("'%s', ", SAL_TYPE_DES[i] + 1);
// 	}
// 	leglendStr.resize(leglendStr.size() - 2);
// 	leglendStr += ");";
// 	fprintf(f, "hold off;\nxlabel('Recall');\nylabel('Precision');\n\n%s\ngrid on;\n", leglendStr.c_str());
// 	fprintf(f, "\n\nfigure(2);hold on;\n");
// 	for (int i = 0; i < SAL_TYPE_NUM; i++)
// 		fprintf(f, "plot(Recall%s,  %s, 'linewidth', 2);\n", SAL_TYPE_DES[i], colorShow[i % SHOW_COLOR_NUM]);
// 	fprintf(f, "%s\nhold off;\nxlabel('Threshold');\nylabel('Recall');\ngrid on;", leglendStr.c_str());
// 
// 	fclose(f);
// 	CmLog::LogProgress("Evaluation finished%-40s\n", "");
// }
// 
// int RegionSaliency::PrintVector(FILE *f, const vecD &v, const string &name, int maxNum)
// {
// 	fprintf(f, "%s = [", name.c_str());
// 	maxNum = min(maxNum, (int)v.size());
// 	int i;
// 	for (i = 0; i < maxNum; i++)
// 		if (v[i] > 0.001)  // Very small recall is too much noisy (may due to compression)
// 			fprintf(f, "%g ", v[i]);
// 		else
// 			break;
// 	fprintf(f, "];\n");
// 	return i;
// }

// void RegionSaliency::Evaluate(const string& resultW, const string &gtImgW, vecD &precision, vecD &recall)
// {
// 	vecS names;
// 	string inDir;
// 	int imgNum = CmFile::GetNames(resultW, names, inDir);
// 	int COLOR_NUM = 256;
// 	precision.resize(COLOR_NUM, 0);
// 	recall.resize(COLOR_NUM, 0);
// 
// 	string truthDir = CmFile::GetFolder(gtImgW);
// 	size_t pathSize = gtImgW.size(), nPos = gtImgW.find_last_of('.');
// 	string ext = gtImgW.substr(nPos, pathSize - nPos);
// 
// 	for (int i = 0; i < imgNum; i++)
// 	{
// 		CmLog::LogProgress("Processing %-40s\r", names[i].c_str());
// 		Mat resS = imread(inDir + names[i], CV_LOAD_IMAGE_GRAYSCALE);
// 		CV_Assert_(resS.data != NULL, ("Can't load RegionSaliency map: %s\n", names[i].c_str()));
// 		names[i].resize(names[i].find_last_of("_"));
// 		Mat truM = imread(truthDir + CmFile::GetNameNE(names[i]) + ext, CV_LOAD_IMAGE_GRAYSCALE);
// 		compare(truM, 128, truM, CMP_GE);
// 		if (truM.data == NULL)
// 		{
// 			CmLog::LogLine("Evaluation stopped due to missing ground truth results\n");
// 			exit(1);
// 		}
// 		CV_Assert_(resS.size() == truM.size(), ("RegionSaliency map and ground truth image size mismatch\n"));
// 
// 		double groundTruth = sum(truM).val[0];
// #pragma omp parallel for
// 		for (int thr = 0; thr < COLOR_NUM; thr++)
// 		{
// 			Mat resM;
// 			compare(resS, thr, resM, CMP_GE);
// 			double res = sum(resM).val[0];
// 			bitwise_and(resM, truM, resM);
// 			double common = sum(resM).val[0];
// 
// 			precision[thr] += common/(res + 1e-8);
// 			recall[thr] += common/(groundTruth + 1e-8);
// 		}
// 	}
// 
// 	for (int thr = 0; thr < COLOR_NUM; thr++)
// 	{
// 		precision[thr] /= imgNum;
// 		recall[thr] /= imgNum;
// 	}
// }
